#pragma once

#include "load_ini.h"

#define strcasecmp _stricmp 

void load_cfg(G_CONFIG* cfg)
{
    cfg->bit = 16;
    cfg->used_bit = 10;
    cfg->order = LITTLE_ENDIAN;
    cfg->pattern = BGGR;
    cfg->width = 1440;
    cfg->height = 1048;

    cfg->rgb_bit = 16;
    cfg->yuv_bit = 16;

    cfg->ob_on = 1;
    cfg->lsc_on = 1;
    cfg->isp_gain_on = 0;
    cfg->gic_on = 0;
    cfg->awb_on = 0;
    cfg->ltm_on = 0;
    cfg->ccm_on = 0;
    cfg->rgbgamma_on = 1;
    cfg->defog_on = 0;
    //cfg->ygamma_on = 0;
    cfg->sharp_on = 0;
    cfg->ynr_on = 0;
    cfg->cnr_on = 0;
    cfg->yuv_txi_on = 0;

    //12->16bit
    cfg->ob = 64 * 16;


    cfg->lsc_type = 0; //0为插值
    cfg->lsc_wblock = 17;
    cfg->lsc_hblock = 17;
    cfg->lsc_max_gain = 4096;
#if 1
    U16 lsc_tmpr[] = {
    1321,1059,1064,1077,1100,1131,1168,1226,1285,1349,1411,1485,1583,1698,1955,3743,4096,
    1049,1036,1048,1064,1087,1117,1157,1220,1280,1335,1390,1452,1524,1620,1788,2372,4096,
    1034,1033,1043,1060,1080,1119,1171,1224,1282,1335,1383,1438,1502,1579,1701,1990,4096,
    1054,1041,1047,1058,1090,1139,1195,1253,1308,1357,1399,1438,1488,1556,1661,1857,3117,
    1070,1053,1051,1070,1109,1160,1217,1271,1321,1368,1409,1444,1486,1536,1624,1787,2443,
    1084,1062,1062,1083,1125,1184,1241,1296,1342,1383,1417,1443,1479,1522,1591,1729,2148,
    1101,1080,1081,1102,1146,1201,1258,1309,1350,1386,1413,1442,1466,1501,1568,1687,2029,
    1124,1096,1094,1115,1156,1207,1256,1307,1341,1375,1401,1423,1445,1476,1541,1653,1955,
    1149,1115,1115,1131,1165,1212,1257,1302,1337,1360,1385,1403,1428,1459,1519,1638,1922,
    1179,1140,1128,1138,1168,1207,1251,1289,1318,1341,1361,1375,1399,1433,1491,1605,1903,
    1211,1160,1145,1144,1167,1200,1235,1266,1289,1309,1328,1349,1368,1407,1468,1587,1922,
    1250,1189,1159,1149,1164,1186,1209,1234,1259,1275,1295,1316,1342,1383,1451,1577,2036,
    1293,1205,1163,1146,1149,1160,1175,1196,1213,1230,1249,1276,1304,1354,1435,1584,2248,
    1358,1233,1175,1145,1133,1135,1140,1156,1168,1184,1211,1239,1276,1333,1430,1611,2546,
    1473,1267,1187,1144,1120,1105,1105,1108,1117,1132,1164,1201,1244,1316,1430,1730,2825,
    1936,1337,1221,1157,1120,1085,1067,1063,1074,1093,1131,1169,1225,1308,1470,2171,2770,
    4096,1551,1278,1184,1130,1082,1042,1024,1024,1048,1108,1157,1224,1348,1712,3202,2934
    };
    U16 lsc_tmpgr[] = {
    1567,1230,1224,1216,1212,1211,1221,1257,1303,1358,1423,1505,1617,1777,2093,4096,4096,
    1244,1213,1217,1208,1196,1187,1195,1230,1271,1319,1383,1456,1551,1689,1908,2622,4096,
    1238,1227,1216,1200,1182,1180,1192,1216,1251,1295,1348,1417,1508,1633,1816,2201,4096,
    1280,1241,1226,1199,1184,1183,1192,1213,1243,1282,1333,1396,1481,1595,1761,2052,3594,
    1304,1261,1231,1205,1191,1184,1190,1206,1234,1270,1314,1376,1455,1565,1715,1963,2820,
    1328,1278,1243,1217,1199,1191,1194,1206,1227,1260,1301,1357,1434,1539,1680,1902,2481,
    1346,1297,1258,1229,1204,1191,1190,1199,1217,1244,1281,1335,1407,1508,1639,1853,2336,
    1382,1320,1276,1240,1214,1192,1187,1194,1208,1233,1267,1315,1382,1481,1618,1813,2258,
    1415,1348,1297,1255,1223,1196,1187,1190,1202,1222,1256,1302,1370,1467,1599,1795,2229,
    1446,1368,1305,1259,1220,1195,1179,1178,1189,1204,1235,1279,1342,1439,1571,1765,2198,
    1478,1388,1319,1267,1221,1191,1173,1169,1179,1194,1221,1265,1329,1421,1552,1749,2245,
    1513,1410,1334,1271,1222,1187,1167,1161,1163,1179,1204,1246,1311,1401,1535,1743,2381,
    1553,1422,1337,1269,1213,1176,1154,1143,1146,1162,1185,1230,1288,1381,1519,1748,2658,
    1626,1449,1349,1272,1211,1167,1136,1127,1125,1141,1170,1209,1278,1371,1522,1795,3053,
    1769,1484,1362,1272,1206,1152,1120,1103,1101,1113,1148,1197,1266,1367,1540,1959,3454,
    2342,1561,1395,1294,1215,1146,1100,1074,1078,1094,1140,1192,1264,1378,1597,2558,3346,
    4096,1814,1453,1321,1230,1152,1075,1032,1024,1054,1131,1197,1281,1434,1910,3914,3415
    };
    U16 lsc_tmpgb[] = {
    1321,1086,1102,1124,1144,1164,1191,1238,1285,1335,1398,1466,1552,1676,1942,3890,4096,
    1048,1058,1083,1100,1111,1125,1150,1190,1236,1281,1333,1392,1466,1569,1740,2363,4096,
    1040,1052,1069,1077,1084,1103,1129,1161,1194,1233,1280,1337,1404,1492,1630,1937,4096,
    1066,1054,1064,1064,1074,1092,1114,1142,1171,1206,1248,1299,1361,1441,1558,1784,3120,
    1075,1063,1059,1059,1070,1085,1103,1124,1150,1182,1219,1269,1326,1401,1505,1690,2413,
    1085,1067,1058,1061,1069,1081,1096,1112,1134,1161,1196,1240,1292,1364,1460,1619,2095,
    1101,1077,1068,1066,1070,1079,1091,1107,1124,1148,1177,1218,1269,1336,1429,1575,1961,
    1119,1090,1078,1071,1072,1077,1086,1099,1113,1134,1161,1196,1245,1309,1396,1536,1886,
    1142,1107,1090,1080,1076,1078,1083,1093,1104,1122,1147,1181,1227,1288,1376,1513,1850,
    1167,1125,1101,1089,1080,1078,1080,1087,1096,1111,1135,1167,1210,1271,1358,1493,1841,
    1196,1146,1115,1097,1085,1080,1078,1080,1089,1102,1124,1156,1198,1257,1343,1483,1886,
    1230,1168,1130,1105,1088,1080,1075,1075,1082,1094,1114,1144,1186,1246,1335,1485,2029,
    1276,1192,1146,1115,1094,1081,1073,1071,1075,1087,1108,1137,1181,1242,1338,1511,2309,
    1343,1223,1164,1127,1099,1080,1070,1064,1066,1079,1101,1133,1179,1244,1351,1569,2700,
    1474,1267,1192,1141,1106,1078,1062,1054,1055,1067,1096,1134,1182,1254,1385,1733,3040,
    1951,1347,1234,1175,1129,1085,1056,1044,1048,1066,1102,1143,1197,1286,1462,2321,2943,
    4096,1572,1310,1221,1168,1114,1056,1024,1024,1052,1122,1173,1240,1365,1780,3589,3045
    };
    U16 lsc_tmpb[] = {
    1331,1098,1118,1133,1146,1155,1169,1206,1247,1294,1348,1418,1507,1632,1884,3689,4096,
    1080,1091,1119,1133,1135,1136,1149,1182,1220,1263,1312,1375,1451,1554,1720,2309,4096,
    1089,1106,1122,1126,1123,1128,1143,1163,1194,1233,1280,1339,1406,1500,1633,1928,4096,
    1123,1121,1129,1122,1121,1126,1140,1157,1181,1216,1255,1310,1379,1464,1585,1801,3072,
    1145,1139,1132,1124,1125,1128,1135,1152,1176,1205,1241,1293,1355,1433,1535,1714,2413,
    1166,1150,1138,1133,1130,1135,1142,1155,1173,1197,1233,1276,1336,1409,1508,1658,2121,
    1179,1159,1151,1140,1131,1132,1140,1151,1166,1188,1216,1258,1312,1382,1473,1616,1989,
    1198,1174,1156,1143,1137,1132,1140,1148,1160,1180,1207,1241,1293,1358,1450,1585,1924,
    1215,1190,1168,1150,1141,1135,1136,1147,1158,1174,1200,1231,1280,1344,1425,1567,1896,
    1241,1209,1181,1162,1145,1140,1140,1149,1159,1170,1193,1225,1269,1329,1416,1549,1891,
    1266,1222,1190,1168,1146,1136,1138,1146,1150,1167,1182,1214,1256,1317,1398,1533,1935,
    1299,1244,1208,1178,1158,1143,1137,1142,1151,1159,1180,1207,1250,1303,1389,1535,2084,
    1330,1252,1209,1178,1152,1136,1128,1126,1132,1148,1165,1200,1235,1291,1381,1544,2384,
    1395,1276,1223,1184,1153,1129,1115,1111,1114,1129,1155,1183,1231,1285,1387,1590,2871,
    1520,1314,1241,1192,1153,1120,1101,1090,1094,1103,1136,1179,1223,1288,1410,1760,3362,
    1990,1376,1267,1206,1163,1112,1077,1059,1063,1085,1129,1169,1219,1299,1466,2380,3173,
    4096,1593,1327,1238,1185,1126,1060,1025,1024,1056,1130,1184,1241,1358,1778,3933,3071
    };

#endif

    cfg->isp_gain = 1024 * 1.5;

    cfg->gic_str = 0.8;
    cfg->gic_thd = 1.25;

    cfg->r_gain = 1024 * 1.79;
    cfg->g_gain = 1024 * 1;
    cfg->b_gain = 1024 * 1.79;


    cfg->ltm_r = 20;
    cfg->ltm_str = 1.3;
    cfg->ltm_gain_limit_max = 2;
    cfg->ltm_gain_limit_min = 0.0;


    float ccm_tmp[9] = {
1.4,-0.2,-0.2,
-0.7,1.7,0,
-0.6,0.3,1.3


    };

    cfg->defog_smp_ratio = 4;
    cfg->light_ratio = 1.0;
    cfg->defog_str = 0.15;

    U32 gamma_xtmp[GAMMA_LENGTH] =
    {
        0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,256,320,384,448,512,640,768,896,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4095
    };

    U32 gamma_ytmp[GAMMA_LENGTH] =
    {
        0,6,11,17,22,28,33,39,44,55,66,77,88,109,130,150,170,210,248,286,323,393,460,525,586,702,809,909,1002,1172,1323,1461,1587,1810,2003,2173,2325,2589,2812,3010,3191,3355,3499,3624,3736,3836,3927,4012,4095
    };

    cfg->ynr_r = 1;
    cfg->cnr_r = 3;

    cfg->txi_r_detail = 1;
    cfg->txi_r_bifilter = 1;
    cfg->txi_str = 5;

    //以下后处理
    U16 lsc_blk = cfg->lsc_wblock * cfg->lsc_hblock;
    cfg->lsc_rgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_bgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_grgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_gbgain = (U16*)malloc(sizeof(U16) * lsc_blk);

    memcpy(cfg->lsc_rgain, lsc_tmpr, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_bgain, lsc_tmpb, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_grgain, lsc_tmpgr, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_gbgain, lsc_tmpgb, sizeof(U16) * lsc_blk);

    if (cfg->awb_on == 0)
    {
        cfg->r_gain = 1024;
        cfg->g_gain = 1024;
        cfg->b_gain = 1024;
    }
    if (cfg->ccm_on == 1)
    {
        memcpy(cfg->ccm, ccm_tmp, 9 * sizeof(float));
    }
    else 
    {
        // 如果不启用CCM，则设置为单位矩阵
        cfg->ccm[0] = 1.0f; cfg->ccm[1] = 0.0f; cfg->ccm[2] = 0.0f;
        cfg->ccm[3] = 0.0f; cfg->ccm[4] = 1.0f; cfg->ccm[5] = 0.0f;
        cfg->ccm[6] = 0.0f; cfg->ccm[7] = 0.0f; cfg->ccm[8] = 1.0f;
    }
    calc_NAI((float)cfg->r_gain / 1024, (float)cfg->g_gain / 1024,
        (float)cfg->b_gain / 1024, cfg->ccm);
   
    if (cfg->rgb_bit > 12)
    {
        U8 shift = cfg->rgb_bit - 12;
        for (int i = 0; i < GAMMA_LENGTH; i++)
        {
            cfg->gamma_x[i] = gamma_xtmp[i] << shift;
            cfg->gamma_y[i] = gamma_ytmp[i] << shift;
        }
    }
    else if (cfg->rgb_bit < 12)
    {
        U8 shift = 12 - cfg->rgb_bit;
        for (int i = 0; i < GAMMA_LENGTH; i++)
        {
            cfg->gamma_x[i] = gamma_xtmp[i] >> shift;
            cfg->gamma_y[i] = gamma_ytmp[i] >> shift;
        }
    }

    return;
}

void calc_NAI(float rg, float gg, float bg, float* ccm)
{
    float nai[3] = { 0 };

  

    // 增益平方
    float gains[3] = {
        rg * rg,
        gg * gg,
        bg * bg
    };

    // 计算每个输出通道的NAI
    for (int out_c = 0; out_c < 3; ++out_c) {
        for (int in_c = 0; in_c < 3; ++in_c) {
            float coeff = ccm[out_c * 3 + in_c];  // 行主序访问
            nai[out_c] += coeff * coeff * gains[in_c];
        }
    }

    LOG("NAI = [%.2f, %.2f, %.2f]\n", nai[0], nai[1], nai[2]);
}

// 从 INI 文件加载配置
void load_cfg_from_ini(const char* filename, G_CONFIG* cfg) {
    FILE* f = fopen(filename, "r");
    if (!f) {
        perror("fopen");
        return;
    }
    // 初始化默认值
    memset(cfg, 0, sizeof(*cfg));
    cfg->order = LITTLE_ENDIAN;
    cfg->pattern = BGGR;
    cfg->lsc_rgain = NULL;

    char line[256], section[64] = { 0 };
    while (fgets(line, sizeof(line), f)) {
        char* p = trim(line);
        if (*p == 0 || *p == ';') continue;
        if (*p == '[') {
            char* end = strchr(p, ']');
            if (end) {
                size_t len = end - p - 1;
                strncpy(section, p + 1, len);
                section[len] = '\0';
            }
            continue;
        }
        char* eq = strchr(p, '=');
        if (!eq) continue;
        *eq = '\0';
        char* key = trim(p), * val = trim(eq + 1);

        if (strcmp(section, "raw_param") == 0) {
            if (strcmp(key, "bit") == 0) cfg->bit = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "used_bit") == 0) cfg->used_bit = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "order") == 0) cfg->order = parse_order(val);
            else if (strcmp(key, "pattern") == 0) cfg->pattern = parse_pattern(val);
        }
        else if (strcmp(section, "module_on") == 0) {
            if (strcmp(key, "ob_on") == 0) cfg->ob_on = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "lsc_on") == 0) cfg->lsc_on = (U8)strtoul(val, NULL, 0);
        }
        else if (strcmp(section, "ob") == 0) {
            if (strcmp(key, "ob") == 0) cfg->ob = (U16)(eval_simple_expr(val) + 0.5);
        }
        else if (strcmp(section, "lsc") == 0) {
            if (strcmp(key, "lsc_rgain") == 0) parse_u16_array(val, &cfg->lsc_rgain);
        }
        else if (strcmp(section, "awb") == 0) {
            if (strcmp(key, "r_gain") == 0) cfg->r_gain = (U16)(eval_simple_expr(val) + 0.5);
        }
        else if (strcmp(section, "ccm") == 0) {
            if (strcmp(key, "ccm") == 0) parse_float_array9(val, cfg->ccm);
        }
    }
    fclose(f);
}

// 去除首尾空白
static char* trim(char* s) {
    char* end;
    while (isspace((unsigned char)*s)) s++;
    if (*s == 0) return s;
    end = s + strlen(s) - 1;
    while (end > s && isspace((unsigned char)*end)) end--;
    *(end + 1) = 0;
    return s;
}

// 解析字节顺序
static ByteOrder parse_order(const char* s) {
    return (strcasecmp(s, "BIG_ENDIAN") == 0) ? BIG_ENDIAN : LITTLE_ENDIAN;
}

// 解析 Bayer 格式
static BayerPattern parse_pattern(const char* s) {
    if (strcasecmp(s, "RGGB") == 0) return RGGB;
    else if (strcasecmp(s, "GRBG") == 0) return GRBG;
    else if (strcasecmp(s, "GBRG") == 0) return GBRG;
    else                                   return BGGR;
}

// 计算简单表达式：支持 a 或 a*b
static double eval_simple_expr(const char* s) {
    char* star = (char*)malloc(strlen(s) + 1);
    strcpy(star, s);
    if (!star) {
        return strtod(s, NULL);
    }
    else {
        double a = strtod(s, NULL);
        double b = strtod(star + 1, NULL);
        return a * b;
    }
}

// 解析 U16 数组，返回元素个数
static int parse_u16_array(const char* s, U16** out) {
    // 定位到 '[' 并跳过
    while (*s && *s != '[') s++;
    if (*s == '[') s++;
    size_t cap = 4, cnt = 0;
    U16* arr = (U16*)malloc(cap * sizeof(U16));
    char* copy = strdup(s);
    char* rb = strchr(copy, ']');
    if (rb) *rb = '\0';

    char* tok = strtok(copy, ",");
    while (tok) {
        double v = eval_simple_expr(trim(tok));
        if (cnt >= cap) {
            cap *= 2;
            arr = (U16*)realloc(arr, cap * sizeof(U16));
        }
        arr[cnt++] = (U16)(v + 0.5);
        tok = strtok(NULL, ",");
    }

    free(copy);
    *out = arr;
    return (int)cnt;
}

// 解析 9 元素 float 数组
static void parse_float_array9(const char* s, float out[9]) {
    while (*s && *s != '[') s++;
    if (*s == '[') s++;
    char* copy = strdup(s);
    char* rb = strchr(copy, ']');
    if (rb) *rb = '\0';

    int idx = 0;
    char* tok = strtok(copy, ",");
    while (tok && idx < 9) {
        out[idx++] = (float)eval_simple_expr(trim(tok));
        tok = strtok(NULL, ",");
    }

    free(copy);
}
