#pragma once

#include "load_ini.h"

#define strcasecmp _stricmp 

void load_cfg(G_CONFIG* cfg)
{
    cfg->bit = 16;
    cfg->used_bit = 10;
    cfg->order = LITTLE_ENDIAN;
    cfg->pattern = BGGR;
    cfg->width = 1440;
    cfg->height = 1048;

    cfg->rgb_bit = 16;
    cfg->yuv_bit = 16;

    cfg->ob_on = 1;
    cfg->lsc_on = 1;
    cfg->gic_on = 1;
    cfg->isp_gain_on = 0;
    cfg->awb_on = 1;
    cfg->ltm_on = 0;
    cfg->ccm_on = 1;
    cfg->rgbgamma_on = 1;
    cfg->defog_on = 0;
    //cfg->ygamma_on = 0;
    cfg->sharp_on = 0;
    cfg->ynr_on = 1;
    cfg->cnr_on = 1;
    cfg->yuv_txi_on = 1;

    //12->16bit
    cfg->ob = 64 * 16;


    cfg->lsc_type = 0; //0为插值
    cfg->lsc_wblock = 17;
    cfg->lsc_hblock = 17;
    cfg->lsc_max_gain = 8192;
#if 1
    U16 lsc_tmpr[] = {
    1024,1024,1024,1024,1024,1024,1024,1041,1056,1068,1072,1073,1076,1066,1063,1039,1024,
    1025,1024,1024,1024,1024,1024,1032,1057,1075,1083,1085,1082,1076,1068,1065,1052,1024,
    1024,1024,1024,1024,1024,1039,1063,1080,1100,1109,1107,1102,1096,1084,1069,1057,1024,
    1024,1024,1024,1024,1040,1069,1099,1124,1144,1153,1148,1134,1120,1106,1092,1066,1039,
    1024,1024,1024,1035,1062,1095,1130,1158,1177,1186,1184,1166,1148,1123,1105,1083,1037,
    1024,1024,1028,1046,1078,1122,1160,1194,1212,1220,1214,1192,1173,1143,1116,1094,1050,
    1024,1027,1037,1059,1097,1140,1181,1211,1230,1237,1230,1213,1183,1151,1124,1097,1060,
    1029,1030,1040,1067,1105,1148,1185,1218,1234,1242,1236,1219,1189,1155,1131,1102,1062,
    1031,1032,1048,1073,1109,1152,1189,1220,1241,1242,1237,1217,1192,1160,1131,1109,1064,
    1035,1038,1050,1071,1108,1147,1187,1215,1232,1236,1228,1207,1184,1155,1125,1101,1059,
    1037,1037,1052,1068,1102,1138,1174,1201,1213,1217,1210,1195,1170,1147,1120,1096,1044,
    1041,1043,1051,1065,1096,1125,1152,1176,1192,1194,1191,1178,1159,1137,1113,1088,1028,
    1038,1036,1040,1053,1076,1099,1122,1144,1156,1159,1155,1150,1131,1117,1099,1074,1024,
    1036,1033,1034,1041,1056,1077,1091,1113,1122,1124,1127,1120,1109,1098,1084,1052,1024,
    1024,1024,1024,1027,1037,1050,1066,1077,1085,1087,1088,1085,1078,1075,1058,1024,1024,
    1024,1024,1024,1024,1024,1024,1035,1043,1050,1050,1051,1048,1048,1042,1030,1024,1024,
    1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024
    };
    U16 lsc_tmpgr[] = {
    1120,1121,1120,1113,1097,1076,1058,1060,1063,1066,1072,1073,1077,1084,1097,1126,1210,
    1120,1123,1125,1111,1087,1061,1045,1049,1053,1055,1061,1061,1065,1074,1086,1106,1198,
    1129,1130,1122,1101,1075,1060,1053,1049,1049,1050,1052,1055,1062,1073,1083,1099,1141,
    1140,1129,1121,1096,1077,1067,1060,1056,1056,1057,1059,1063,1070,1079,1091,1101,1119,
    1139,1131,1116,1095,1082,1071,1065,1062,1062,1063,1064,1068,1074,1084,1096,1107,1111,
    1140,1131,1114,1100,1087,1077,1070,1068,1066,1068,1069,1073,1081,1090,1102,1114,1119,
    1138,1129,1116,1103,1089,1078,1071,1067,1067,1067,1070,1074,1080,1090,1100,1115,1122,
    1145,1133,1119,1105,1092,1079,1072,1069,1068,1069,1071,1075,1081,1092,1106,1117,1125,
    1147,1136,1122,1107,1094,1081,1074,1070,1070,1070,1073,1077,1084,1096,1107,1120,1129,
    1147,1135,1119,1104,1091,1080,1071,1067,1068,1067,1070,1074,1080,1092,1105,1118,1124,
    1145,1133,1118,1104,1089,1077,1070,1067,1067,1067,1069,1073,1080,1091,1104,1116,1122,
    1142,1131,1117,1101,1088,1075,1068,1065,1063,1064,1066,1070,1078,1088,1101,1113,1113,
    1136,1123,1110,1095,1080,1069,1063,1059,1058,1060,1060,1066,1071,1082,1094,1105,1132,
    1132,1119,1106,1090,1077,1066,1056,1055,1053,1054,1057,1059,1067,1077,1089,1098,1157,
    1128,1112,1102,1083,1071,1060,1052,1048,1047,1047,1049,1053,1061,1071,1082,1093,1177,
    1136,1114,1103,1093,1072,1053,1046,1039,1039,1038,1042,1046,1053,1061,1072,1151,1163,
    1226,1118,1108,1100,1087,1073,1048,1031,1024,1029,1042,1050,1055,1064,1104,1200,1128
    };
    U16 lsc_tmpgb[] = {
    1120,1121,1120,1113,1097,1076,1058,1060,1063,1066,1072,1073,1077,1084,1097,1126,1210,
    1120,1123,1125,1111,1087,1061,1045,1049,1053,1055,1061,1061,1065,1074,1086,1106,1198,
    1129,1130,1122,1101,1075,1060,1053,1049,1049,1050,1052,1055,1062,1073,1083,1099,1141,
    1140,1129,1121,1096,1077,1067,1060,1056,1056,1057,1059,1063,1070,1079,1091,1101,1119,
    1139,1131,1116,1095,1082,1071,1065,1062,1062,1063,1064,1068,1074,1084,1096,1107,1111,
    1140,1131,1114,1100,1087,1077,1070,1068,1066,1068,1069,1073,1081,1090,1102,1114,1119,
    1138,1129,1116,1103,1089,1078,1071,1067,1067,1067,1070,1074,1080,1090,1100,1115,1122,
    1145,1133,1119,1105,1092,1079,1072,1069,1068,1069,1071,1075,1081,1092,1106,1117,1125,
    1147,1136,1122,1107,1094,1081,1074,1070,1070,1070,1073,1077,1084,1096,1107,1120,1129,
    1147,1135,1119,1104,1091,1080,1071,1067,1068,1067,1070,1074,1080,1092,1105,1118,1124,
    1145,1133,1118,1104,1089,1077,1070,1067,1067,1067,1069,1073,1080,1091,1104,1116,1122,
    1142,1131,1117,1101,1088,1075,1068,1065,1063,1064,1066,1070,1078,1088,1101,1113,1113,
    1136,1123,1110,1095,1080,1069,1063,1059,1058,1060,1060,1066,1071,1082,1094,1105,1132,
    1132,1119,1106,1090,1077,1066,1056,1055,1053,1054,1057,1059,1067,1077,1089,1098,1157,
    1128,1112,1102,1083,1071,1060,1052,1048,1047,1047,1049,1053,1061,1071,1082,1093,1177,
    1136,1114,1103,1093,1072,1053,1046,1039,1039,1038,1042,1046,1053,1061,1072,1151,1163,
    1226,1118,1108,1100,1087,1073,1048,1031,1024,1029,1042,1050,1055,1064,1104,1200,1128
    };
    U16 lsc_tmpb[] = {
    1032,1062,1076,1078,1067,1046,1025,1024,1024,1024,1024,1024,1024,1024,1024,1024,1122,
    1056,1079,1094,1091,1070,1042,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1102,
    1079,1097,1102,1088,1065,1048,1037,1026,1024,1024,1024,1026,1026,1030,1026,1024,1035,
    1092,1103,1105,1086,1069,1056,1048,1038,1033,1033,1030,1033,1038,1041,1042,1034,1024,
    1096,1108,1103,1087,1077,1065,1054,1050,1048,1044,1043,1044,1047,1048,1045,1039,1024,
    1102,1109,1102,1094,1083,1076,1067,1064,1060,1056,1056,1054,1059,1058,1058,1049,1037,
    1097,1102,1104,1096,1083,1075,1070,1065,1063,1060,1058,1058,1059,1060,1056,1051,1039,
    1097,1103,1099,1093,1087,1077,1075,1070,1068,1066,1065,1063,1064,1063,1064,1057,1045,
    1090,1101,1098,1091,1086,1079,1075,1075,1075,1072,1072,1068,1069,1069,1061,1061,1050,
    1089,1101,1099,1093,1086,1083,1081,1083,1083,1079,1077,1075,1074,1071,1068,1063,1052,
    1084,1092,1093,1091,1082,1078,1081,1087,1082,1085,1077,1076,1074,1073,1066,1059,1051,
    1082,1091,1095,1092,1090,1084,1084,1088,1090,1085,1085,1081,1080,1071,1066,1059,1052,
    1068,1076,1081,1082,1079,1077,1077,1077,1079,1082,1077,1081,1071,1065,1057,1047,1086,
    1064,1069,1076,1076,1075,1071,1068,1070,1071,1072,1075,1070,1070,1058,1052,1038,1155,
    1057,1062,1071,1070,1068,1064,1062,1059,1062,1059,1062,1065,1060,1052,1043,1042,1219,
    1053,1054,1063,1068,1064,1050,1045,1039,1039,1043,1050,1048,1043,1035,1027,1123,1173,
    1110,1052,1064,1071,1074,1066,1042,1028,1024,1032,1045,1048,1039,1032,1064,1258,1072
    };

#endif

    cfg->isp_gain = 1024 * 0.8;

    cfg->gic_str = 0.8;
    cfg->gic_thd = 1.25;
     
    cfg->r_gain = 1024 * 1.17;
    cfg->g_gain = 1024 * 1;
    cfg->b_gain = 1024 * 1;


    cfg->ltm_r = 20;
    cfg->ltm_str = 1.3;
    cfg->ltm_gain_limit_max = 2;
    cfg->ltm_gain_limit_min = 0.0;


    float ccm_tmp[9] = {
1.13,0.01,-0.14,
-0.17,1.34,-0.28,
0.04,-0.35,1.3

    };




    cfg->defog_smp_ratio = 4;
    cfg->light_ratio = 1.0;
    cfg->defog_str = 0.15;

    U32 gamma_xtmp[GAMMA_LENGTH] =
    {
        0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,256,320,384,448,512,640,768,896,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4095
    };

    U32 gamma_ytmp[GAMMA_LENGTH] =
    {
        0,6,11,17,22,28,33,39,44,55,66,77,88,109,130,150,170,210,248,286,323,393,460,525,586,702,809,909,1002,1172,1323,1461,1587,1810,2003,2173,2325,2589,2812,3010,3191,3355,3499,3624,3736,3836,3927,4012,4095
    };

    cfg->ynr_r = 1;
    cfg->cnr_r = 3;

    cfg->txi_r_detail = 1;
    cfg->txi_r_bifilter = 1;
    cfg->txi_str = 20;



    //以下后处理
    U16 lsc_blk = cfg->lsc_wblock * cfg->lsc_hblock;
    cfg->lsc_rgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_bgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_grgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_gbgain = (U16*)malloc(sizeof(U16) * lsc_blk);

    memcpy(cfg->lsc_rgain, lsc_tmpr, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_bgain, lsc_tmpb, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_grgain, lsc_tmpgr, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_gbgain, lsc_tmpgb, sizeof(U16) * lsc_blk);

    if (cfg->awb_on == 0)
    {
        cfg->r_gain = 1024;
        cfg->g_gain = 1024;
        cfg->b_gain = 1024;
    }
    if (cfg->ccm_on == 1)
    {
        memcpy(cfg->ccm, ccm_tmp, 9 * sizeof(float));
    }
    else 
    {
        // 如果不启用CCM，则设置为单位矩阵
        cfg->ccm[0] = 1.0f; cfg->ccm[1] = 0.0f; cfg->ccm[2] = 0.0f;
        cfg->ccm[3] = 0.0f; cfg->ccm[4] = 1.0f; cfg->ccm[5] = 0.0f;
        cfg->ccm[6] = 0.0f; cfg->ccm[7] = 0.0f; cfg->ccm[8] = 1.0f;
    }
    calc_NAI((float)cfg->r_gain / 1024, (float)cfg->g_gain / 1024,
        (float)cfg->b_gain / 1024, cfg->ccm);
   
    if (cfg->rgb_bit > 12)
    {
        U8 shift = cfg->rgb_bit - 12;
        for (int i = 0; i < GAMMA_LENGTH; i++)
        {
            cfg->gamma_x[i] = gamma_xtmp[i] << shift;
            cfg->gamma_y[i] = gamma_ytmp[i] << shift;
        }
    }
    else if (cfg->rgb_bit < 12)
    {
        U8 shift = 12 - cfg->rgb_bit;
        for (int i = 0; i < GAMMA_LENGTH; i++)
        {
            cfg->gamma_x[i] = gamma_xtmp[i] >> shift;
            cfg->gamma_y[i] = gamma_ytmp[i] >> shift;
        }
    }

    return;
}

void calc_NAI(float rg, float gg, float bg, float* ccm)
{
    float nai[3] = { 0 };

  

    // 增益平方
    float gains[3] = {
        rg * rg,
        gg * gg,
        bg * bg
    };

    // 计算每个输出通道的NAI
    for (int out_c = 0; out_c < 3; ++out_c) {
        for (int in_c = 0; in_c < 3; ++in_c) {
            float coeff = ccm[out_c * 3 + in_c];  // 行主序访问
            nai[out_c] += coeff * coeff * gains[in_c];
        }
    }

    LOG("NAI = [%.2f, %.2f, %.2f]\n", nai[0], nai[1], nai[2]);
}

// 从 INI 文件加载配置
void load_cfg_from_ini(const char* filename, G_CONFIG* cfg) {
    FILE* f = fopen(filename, "r");
    if (!f) {
        perror("fopen");
        return;
    }
    // 初始化默认值
    memset(cfg, 0, sizeof(*cfg));
    cfg->order = LITTLE_ENDIAN;
    cfg->pattern = BGGR;
    cfg->lsc_rgain = NULL;

    char line[256], section[64] = { 0 };
    while (fgets(line, sizeof(line), f)) {
        char* p = trim(line);
        if (*p == 0 || *p == ';') continue;
        if (*p == '[') {
            char* end = strchr(p, ']');
            if (end) {
                size_t len = end - p - 1;
                strncpy(section, p + 1, len);
                section[len] = '\0';
            }
            continue;
        }
        char* eq = strchr(p, '=');
        if (!eq) continue;
        *eq = '\0';
        char* key = trim(p), * val = trim(eq + 1);

        if (strcmp(section, "raw_param") == 0) {
            if (strcmp(key, "bit") == 0) cfg->bit = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "used_bit") == 0) cfg->used_bit = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "order") == 0) cfg->order = parse_order(val);
            else if (strcmp(key, "pattern") == 0) cfg->pattern = parse_pattern(val);
        }
        else if (strcmp(section, "module_on") == 0) {
            if (strcmp(key, "ob_on") == 0) cfg->ob_on = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "lsc_on") == 0) cfg->lsc_on = (U8)strtoul(val, NULL, 0);
        }
        else if (strcmp(section, "ob") == 0) {
            if (strcmp(key, "ob") == 0) cfg->ob = (U16)(eval_simple_expr(val) + 0.5);
        }
        else if (strcmp(section, "lsc") == 0) {
            if (strcmp(key, "lsc_rgain") == 0) parse_u16_array(val, &cfg->lsc_rgain);
        }
        else if (strcmp(section, "awb") == 0) {
            if (strcmp(key, "r_gain") == 0) cfg->r_gain = (U16)(eval_simple_expr(val) + 0.5);
        }
        else if (strcmp(section, "ccm") == 0) {
            if (strcmp(key, "ccm") == 0) parse_float_array9(val, cfg->ccm);
        }
    }
    fclose(f);
}

// 去除首尾空白
static char* trim(char* s) {
    char* end;
    while (isspace((unsigned char)*s)) s++;
    if (*s == 0) return s;
    end = s + strlen(s) - 1;
    while (end > s && isspace((unsigned char)*end)) end--;
    *(end + 1) = 0;
    return s;
}

// 解析字节顺序
static ByteOrder parse_order(const char* s) {
    return (strcasecmp(s, "BIG_ENDIAN") == 0) ? BIG_ENDIAN : LITTLE_ENDIAN;
}

// 解析 Bayer 格式
static BayerPattern parse_pattern(const char* s) {
    if (strcasecmp(s, "RGGB") == 0) return RGGB;
    else if (strcasecmp(s, "GRBG") == 0) return GRBG;
    else if (strcasecmp(s, "GBRG") == 0) return GBRG;
    else                                   return BGGR;
}

// 计算简单表达式：支持 a 或 a*b
static double eval_simple_expr(const char* s) {
    char* star = (char*)malloc(strlen(s) + 1);
    strcpy(star, s);
    if (!star) {
        return strtod(s, NULL);
    }
    else {
        double a = strtod(s, NULL);
        double b = strtod(star + 1, NULL);
        return a * b;
    }
}

// 解析 U16 数组，返回元素个数
static int parse_u16_array(const char* s, U16** out) {
    // 定位到 '[' 并跳过
    while (*s && *s != '[') s++;
    if (*s == '[') s++;
    size_t cap = 4, cnt = 0;
    U16* arr = (U16*)malloc(cap * sizeof(U16));
    char* copy = strdup(s);
    char* rb = strchr(copy, ']');
    if (rb) *rb = '\0';

    char* tok = strtok(copy, ",");
    while (tok) {
        double v = eval_simple_expr(trim(tok));
        if (cnt >= cap) {
            cap *= 2;
            arr = (U16*)realloc(arr, cap * sizeof(U16));
        }
        arr[cnt++] = (U16)(v + 0.5);
        tok = strtok(NULL, ",");
    }

    free(copy);
    *out = arr;
    return (int)cnt;
}

// 解析 9 元素 float 数组
static void parse_float_array9(const char* s, float out[9]) {
    while (*s && *s != '[') s++;
    if (*s == '[') s++;
    char* copy = strdup(s);
    char* rb = strchr(copy, ']');
    if (rb) *rb = '\0';

    int idx = 0;
    char* tok = strtok(copy, ",");
    while (tok && idx < 9) {
        out[idx++] = (float)eval_simple_expr(trim(tok));
        tok = strtok(NULL, ",");
    }

    free(copy);
}
