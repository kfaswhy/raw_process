#pragma once

#include "load_ini.h"

#define strcasecmp _stricmp 

void load_cfg(G_CONFIG* cfg)
{
    cfg->bit = 16;
    cfg->used_bit = 10;
    cfg->order = LITTLE_ENDIAN;
    cfg->pattern = BGGR;
    cfg->width = 1280;
    cfg->height = 720;

    cfg->rgb_bit = 16;
    cfg->yuv_bit = 16;

    cfg->ob_on = 1;
    cfg->lsc_on = 1;
    cfg->isp_gain_on = 0;
    cfg->awb_on = 1;
    cfg->ltm_on = 0;
    cfg->ccm_on = 0;
    cfg->rgbgamma_on = 1;
    cfg->defog_on = 0;
    //cfg->ygamma_on = 0;
    cfg->sharp_on = 0;
    cfg->ynr_on = 0;
    cfg->cnr_on = 0;
    cfg->yuv_txi_on = 0;


    //12->16bit
    cfg->ob = 64 * 16;

    cfg->lsc_type = 1; //0为插值
    cfg->lsc_wblock = 17;
    cfg->lsc_hblock = 17; 

# if 1
    U16 lsc_tmpr[] = {
    1963,1650,1505,1409,1321,1253,1230,1218,1216,1211,1224,1258,1320,1404,1553,1663,1908,
    1836,1547,1446,1337,1273,1232,1184,1177,1159,1162,1194,1224,1277,1352,1483,1606,1842,
    1748,1575,1403,1324,1241,1177,1151,1138,1124,1132,1156,1182,1237,1330,1435,1594,1777,
    1692,1508,1358,1283,1219,1158,1119,1108,1104,1096,1124,1157,1213,1297,1386,1530,1717,
    1668,1469,1344,1237,1186,1143,1105,1084,1077,1071,1106,1131,1195,1274,1364,1500,1714,
    1616,1465,1327,1240,1175,1121,1067,1062,1056,1072,1089,1123,1184,1248,1334,1473,1674,
    1596,1449,1301,1222,1142,1110,1069,1055,1046,1048,1074,1105,1159,1244,1306,1448,1652,
    1586,1430,1302,1217,1137,1095,1065,1050,1031,1056,1072,1089,1139,1222,1333,1431,1634,
    1593,1443,1282,1194,1130,1077,1060,1040,1024,1042,1067,1096,1137,1213,1323,1401,1618,
    1605,1417,1292,1196,1124,1070,1044,1044,1041,1048,1069,1097,1146,1228,1287,1426,1614,
    1595,1410,1291,1195,1123,1088,1048,1044,1041,1053,1077,1105,1161,1234,1296,1426,1612,
    1593,1430,1286,1227,1131,1088,1060,1051,1046,1062,1081,1121,1159,1218,1307,1436,1591,
    1601,1447,1286,1214,1146,1106,1082,1056,1065,1080,1103,1114,1162,1236,1329,1455,1618,
    1660,1466,1350,1232,1167,1123,1078,1073,1081,1087,1113,1140,1168,1243,1337,1476,1657,
    1682,1505,1345,1256,1181,1131,1119,1091,1102,1119,1133,1159,1198,1275,1387,1495,1686,
    1717,1546,1386,1265,1210,1168,1131,1120,1122,1122,1141,1193,1219,1309,1386,1551,1717,
    1830,1575,1429,1339,1271,1206,1174,1153,1148,1154,1180,1219,1246,1322,1422,1578,1775
    };
    U16 lsc_tmpgr[] = {
    1469,1317,1237,1196,1158,1126,1112,1104,1103,1094,1101,1107,1126,1158,1204,1254,1391,
    1421,1277,1221,1173,1145,1114,1098,1086,1081,1079,1080,1091,1106,1138,1187,1255,1326,
    1403,1286,1215,1162,1129,1112,1085,1074,1064,1063,1066,1077,1098,1131,1177,1225,1317,
    1340,1274,1188,1152,1124,1097,1071,1059,1053,1047,1065,1065,1095,1124,1158,1224,1295,
    1333,1253,1195,1146,1109,1082,1065,1048,1041,1041,1043,1056,1079,1120,1147,1210,1287,
    1323,1235,1185,1136,1110,1075,1056,1041,1037,1033,1043,1056,1079,1109,1139,1199,1281,
    1314,1250,1183,1139,1103,1072,1047,1034,1029,1033,1034,1048,1080,1101,1139,1187,1272,
    1288,1232,1176,1134,1115,1069,1045,1030,1024,1027,1033,1045,1068,1103,1130,1178,1272,
    1313,1220,1169,1128,1099,1068,1040,1028,1024,1028,1036,1050,1071,1098,1131,1180,1257,
    1299,1237,1171,1126,1087,1065,1039,1032,1030,1031,1040,1053,1071,1103,1139,1189,1261,
    1308,1220,1166,1125,1090,1062,1043,1033,1031,1035,1040,1058,1077,1100,1132,1184,1254,
    1287,1224,1168,1139,1098,1067,1050,1037,1035,1038,1047,1061,1079,1113,1134,1177,1259,
    1309,1226,1175,1133,1100,1073,1056,1047,1043,1046,1053,1066,1092,1107,1141,1187,1255,
    1327,1235,1185,1140,1109,1082,1067,1055,1054,1056,1062,1073,1091,1113,1149,1193,1265,
    1351,1243,1198,1149,1120,1096,1080,1070,1065,1067,1073,1084,1098,1121,1156,1206,1287,
    1357,1270,1216,1166,1135,1109,1096,1086,1081,1080,1085,1095,1107,1133,1164,1226,1280,
    1420,1278,1221,1181,1149,1130,1112,1102,1095,1098,1100,1118,1124,1142,1175,1232,1310
    };
    U16 lsc_tmpgb[] = {
    1465,1316,1229,1203,1159,1136,1119,1107,1102,1099,1100,1108,1129,1166,1209,1259,1391,
    1420,1269,1219,1177,1142,1120,1104,1091,1080,1079,1085,1093,1122,1149,1188,1257,1346,
    1390,1272,1210,1158,1126,1115,1087,1070,1065,1067,1067,1078,1099,1146,1184,1228,1324,
    1360,1260,1191,1146,1131,1102,1072,1064,1050,1054,1064,1065,1093,1117,1165,1220,1306,
    1337,1233,1185,1141,1112,1082,1069,1048,1045,1041,1049,1062,1085,1114,1160,1216,1298,
    1322,1232,1180,1135,1105,1076,1054,1047,1035,1038,1040,1059,1086,1113,1142,1195,1286,
    1310,1229,1174,1131,1102,1072,1052,1034,1030,1034,1039,1050,1080,1104,1141,1188,1272,
    1299,1233,1170,1126,1093,1069,1042,1030,1026,1031,1043,1048,1075,1098,1139,1181,1260,
    1298,1219,1165,1121,1093,1063,1040,1028,1024,1031,1040,1048,1077,1102,1132,1182,1259,
    1286,1220,1164,1120,1087,1059,1046,1029,1031,1030,1045,1051,1076,1099,1133,1179,1261,
    1297,1220,1164,1123,1089,1061,1046,1033,1031,1037,1043,1061,1078,1105,1135,1190,1251,
    1296,1221,1167,1127,1094,1070,1046,1037,1041,1053,1055,1071,1079,1110,1147,1187,1259,
    1320,1233,1179,1134,1102,1073,1062,1046,1048,1057,1065,1076,1083,1113,1142,1188,1261,
    1337,1238,1180,1140,1113,1092,1071,1068,1058,1062,1065,1081,1093,1113,1148,1208,1270,
    1353,1250,1192,1155,1129,1099,1090,1075,1072,1077,1082,1093,1104,1129,1157,1201,1272,
    1348,1271,1215,1174,1136,1117,1104,1092,1088,1093,1098,1104,1123,1135,1171,1228,1290,
    1412,1272,1223,1183,1163,1137,1119,1114,1109,1105,1119,1130,1126,1147,1184,1237,1312
    };
    U16 lsc_tmpb[] = {
    1410,1267,1216,1176,1144,1126,1112,1104,1095,1096,1099,1111,1122,1146,1178,1227,1327,
    1358,1254,1205,1167,1133,1111,1096,1086,1080,1076,1087,1089,1113,1138,1166,1205,1297,
    1333,1237,1192,1156,1124,1102,1082,1074,1067,1060,1075,1079,1097,1121,1155,1200,1269,
    1317,1230,1186,1146,1117,1091,1074,1063,1064,1054,1053,1069,1085,1114,1152,1196,1260,
    1296,1224,1176,1143,1109,1085,1060,1054,1043,1040,1053,1057,1079,1108,1144,1183,1247,
    1287,1222,1175,1140,1106,1086,1056,1048,1038,1037,1037,1049,1070,1104,1139,1178,1245,
    1289,1224,1179,1137,1105,1076,1049,1040,1038,1029,1043,1046,1066,1099,1132,1176,1245,
    1287,1224,1176,1155,1113,1070,1052,1043,1038,1035,1042,1045,1068,1098,1137,1180,1242,
    1276,1218,1178,1130,1106,1078,1050,1035,1024,1028,1045,1047,1068,1098,1136,1180,1247,
    1283,1215,1173,1122,1099,1067,1045,1036,1024,1031,1037,1052,1078,1110,1140,1191,1243,
    1279,1227,1178,1139,1100,1071,1055,1044,1036,1035,1043,1055,1077,1113,1133,1178,1245,
    1286,1230,1180,1151,1108,1081,1059,1051,1046,1048,1048,1060,1085,1103,1146,1178,1246,
    1296,1242,1188,1150,1125,1095,1077,1047,1054,1046,1060,1071,1092,1114,1144,1190,1248,
    1308,1243,1194,1161,1126,1107,1078,1078,1062,1069,1068,1089,1094,1121,1154,1197,1259,
    1324,1250,1198,1163,1137,1112,1103,1084,1076,1069,1091,1095,1108,1136,1160,1204,1263,
    1346,1253,1197,1164,1142,1124,1107,1106,1084,1084,1094,1114,1122,1132,1164,1208,1280,
    1368,1265,1214,1180,1168,1129,1117,1112,1097,1094,1105,1110,1123,1147,1179,1217,1287
    };



#endif
    cfg->isp_gain = 1024 * 1.5;

    cfg->r_gain = 1024 * 2;
    cfg->g_gain = 1024 * 1;
    cfg->b_gain = 1024 * 1.2;


    cfg->ltm_r = 20;
    cfg->ltm_str = 1.3;
    cfg->ltm_gain_limit_max = 2;
    cfg->ltm_gain_limit_min = 0.0;


    float ccm_tmp[9] = {
1.4,-0.2,-0.2,
-0.7,1.7,0,
-0.6,0.3,1.3


    };

    U32 gamma_xtmp[GAMMA_LENGTH] =
    {
        0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,256,320,384,448,512,640,768,896,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4095
    };

    U32 gamma_ytmp[GAMMA_LENGTH] =
    {
        0,6,11,17,22,28,33,39,44,55,66,77,88,109,130,150,170,210,248,286,323,393,460,525,586,702,809,909,1002,1172,1323,1461,1587,1810,2003,2173,2325,2589,2812,3010,3191,3355,3499,3624,3736,3836,3927,4012,4095
    };

    cfg->ynr_r = 1;
    cfg->cnr_r = 3;

    cfg->txi_r_detail = 1;
    cfg->txi_r_bifilter = 1;
    cfg->txi_str = 5;

    //以下后处理
    U16 lsc_blk = cfg->lsc_wblock * cfg->lsc_hblock;
    cfg->lsc_rgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_bgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_grgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_gbgain = (U16*)malloc(sizeof(U16) * lsc_blk);

    memcpy(cfg->lsc_rgain, lsc_tmpr, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_bgain, lsc_tmpb, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_grgain, lsc_tmpgr, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_gbgain, lsc_tmpgb, sizeof(U16) * lsc_blk);


    memcpy(cfg->ccm, ccm_tmp, 9 * sizeof(float));
    if (cfg->rgb_bit > 12)
    {
        U8 shift = cfg->rgb_bit - 12;
        for (int i = 0; i < GAMMA_LENGTH; i++)
        {
            cfg->gamma_x[i] = gamma_xtmp[i] << shift;
            cfg->gamma_y[i] = gamma_ytmp[i] << shift;
        }
    }
    else if (cfg->rgb_bit < 12)
    {
        U8 shift = 12 - cfg->rgb_bit;
        for (int i = 0; i < GAMMA_LENGTH; i++)
        {
            cfg->gamma_x[i] = gamma_xtmp[i] >> shift;
            cfg->gamma_y[i] = gamma_ytmp[i] >> shift;
        }
    }

    return;
}

// 从 INI 文件加载配置
void load_cfg_from_ini(const char* filename, G_CONFIG* cfg) {
    FILE* f = fopen(filename, "r");
    if (!f) {
        perror("fopen");
        return;
    }
    // 初始化默认值
    memset(cfg, 0, sizeof(*cfg));
    cfg->order = LITTLE_ENDIAN;
    cfg->pattern = BGGR;
    cfg->lsc_rgain = NULL;

    char line[256], section[64] = { 0 };
    while (fgets(line, sizeof(line), f)) {
        char* p = trim(line);
        if (*p == 0 || *p == ';') continue;
        if (*p == '[') {
            char* end = strchr(p, ']');
            if (end) {
                size_t len = end - p - 1;
                strncpy(section, p + 1, len);
                section[len] = '\0';
            }
            continue;
        }
        char* eq = strchr(p, '=');
        if (!eq) continue;
        *eq = '\0';
        char* key = trim(p), * val = trim(eq + 1);

        if (strcmp(section, "raw_param") == 0) {
            if (strcmp(key, "bit") == 0) cfg->bit = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "used_bit") == 0) cfg->used_bit = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "order") == 0) cfg->order = parse_order(val);
            else if (strcmp(key, "pattern") == 0) cfg->pattern = parse_pattern(val);
        }
        else if (strcmp(section, "module_on") == 0) {
            if (strcmp(key, "ob_on") == 0) cfg->ob_on = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "lsc_on") == 0) cfg->lsc_on = (U8)strtoul(val, NULL, 0);
        }
        else if (strcmp(section, "ob") == 0) {
            if (strcmp(key, "ob") == 0) cfg->ob = (U16)(eval_simple_expr(val) + 0.5);
        }
        else if (strcmp(section, "lsc") == 0) {
            if (strcmp(key, "lsc_rgain") == 0) parse_u16_array(val, &cfg->lsc_rgain);
        }
        else if (strcmp(section, "awb") == 0) {
            if (strcmp(key, "r_gain") == 0) cfg->r_gain = (U16)(eval_simple_expr(val) + 0.5);
        }
        else if (strcmp(section, "ccm") == 0) {
            if (strcmp(key, "ccm") == 0) parse_float_array9(val, cfg->ccm);
        }
    }
    fclose(f);
}

// 去除首尾空白
static char* trim(char* s) {
    char* end;
    while (isspace((unsigned char)*s)) s++;
    if (*s == 0) return s;
    end = s + strlen(s) - 1;
    while (end > s && isspace((unsigned char)*end)) end--;
    *(end + 1) = 0;
    return s;
}

// 解析字节顺序
static ByteOrder parse_order(const char* s) {
    return (strcasecmp(s, "BIG_ENDIAN") == 0) ? BIG_ENDIAN : LITTLE_ENDIAN;
}

// 解析 Bayer 格式
static BayerPattern parse_pattern(const char* s) {
    if (strcasecmp(s, "RGGB") == 0) return RGGB;
    else if (strcasecmp(s, "GRBG") == 0) return GRBG;
    else if (strcasecmp(s, "GBRG") == 0) return GBRG;
    else                                   return BGGR;
}

// 计算简单表达式：支持 a 或 a*b
static double eval_simple_expr(const char* s) {
    char* star = (char*)malloc(strlen(s) + 1);
    strcpy(star, s);
    if (!star) {
        return strtod(s, NULL);
    }
    else {
        double a = strtod(s, NULL);
        double b = strtod(star + 1, NULL);
        return a * b;
    }
}

// 解析 U16 数组，返回元素个数
static int parse_u16_array(const char* s, U16** out) {
    // 定位到 '[' 并跳过
    while (*s && *s != '[') s++;
    if (*s == '[') s++;
    size_t cap = 4, cnt = 0;
    U16* arr = (U16*)malloc(cap * sizeof(U16));
    char* copy = strdup(s);
    char* rb = strchr(copy, ']');
    if (rb) *rb = '\0';

    char* tok = strtok(copy, ",");
    while (tok) {
        double v = eval_simple_expr(trim(tok));
        if (cnt >= cap) {
            cap *= 2;
            arr = (U16*)realloc(arr, cap * sizeof(U16));
        }
        arr[cnt++] = (U16)(v + 0.5);
        tok = strtok(NULL, ",");
    }

    free(copy);
    *out = arr;
    return (int)cnt;
}

// 解析 9 元素 float 数组
static void parse_float_array9(const char* s, float out[9]) {
    while (*s && *s != '[') s++;
    if (*s == '[') s++;
    char* copy = strdup(s);
    char* rb = strchr(copy, ']');
    if (rb) *rb = '\0';

    int idx = 0;
    char* tok = strtok(copy, ",");
    while (tok && idx < 9) {
        out[idx++] = (float)eval_simple_expr(trim(tok));
        tok = strtok(NULL, ",");
    }

    free(copy);
}
