#pragma once

#include "load_ini.h"

#define strcasecmp _stricmp 

void load_cfg(G_CONFIG* cfg)
{
    cfg->bit = 16;
    cfg->used_bit = 10;
    cfg->order = LITTLE_ENDIAN;
    cfg->pattern = BGGR;
    cfg->width = 1440;
    cfg->height = 1048;

    cfg->rgb_bit = 16;
    cfg->yuv_bit = 16;

    cfg->ob_on = 1;
    cfg->lsc_on = 1;
    cfg->gic_on = 1;
    cfg->isp_gain_on = 1;
    cfg->awb_on = 0;
    cfg->ltm_on = 0;
    cfg->ccm_on = 1;
    cfg->rgbgamma_on = 1;
    cfg->defog_on = 0;
    //cfg->ygamma_on = 0;
    cfg->sharp_on = 0;
    cfg->ynr_on = 1;
    cfg->cnr_on = 1;
    cfg->yuv_txi_on = 1;

    //12->16bit
    cfg->ob = 64 * 16;


    cfg->lsc_type = 0; //0为插值
    cfg->lsc_wblock = 17;
    cfg->lsc_hblock = 17;
#if 1
    U16 lsc_tmpr[] = {
    2008,1135,1037,1039,1062,1094,1135,1183,1232,1285,1330,1383,1438,1524,1744,3495,7655,
    1217,1012,1013,1031,1059,1095,1141,1219,1299,1369,1393,1404,1423,1483,1589,2052,7077,
    1017,994,1008,1030,1062,1122,1247,1365,1461,1528,1531,1527,1493,1460,1532,1731,3807,
    1010,1001,1013,1037,1087,1228,1396,1545,1668,1732,1721,1680,1602,1523,1505,1622,2507,
    1022,1014,1023,1047,1165,1348,1560,1749,1890,1975,1944,1859,1728,1604,1532,1567,1987,
    1031,1026,1033,1077,1237,1457,1716,1946,2125,2210,2155,2025,1841,1664,1547,1534,1780,
    1048,1039,1045,1117,1303,1554,1849,2120,2305,2396,2326,2157,1932,1709,1559,1512,1674,
    1064,1053,1059,1150,1351,1622,1942,2231,2434,2507,2434,2256,1998,1731,1567,1507,1625,
    1081,1067,1071,1172,1375,1654,1990,2294,2486,2561,2481,2298,2015,1751,1577,1511,1600,
    1097,1079,1079,1176,1378,1650,1982,2278,2456,2529,2458,2259,1988,1721,1554,1477,1579,
    1115,1091,1089,1170,1355,1608,1910,2190,2357,2414,2345,2153,1902,1673,1517,1450,1564,
    1134,1102,1093,1144,1308,1535,1788,2019,2176,2207,2157,2000,1791,1591,1471,1425,1564,
    1156,1113,1098,1113,1247,1422,1633,1815,1940,1964,1928,1812,1667,1519,1417,1399,1585,
    1184,1126,1101,1095,1171,1306,1460,1597,1682,1703,1685,1616,1526,1416,1365,1393,1641,
    1231,1143,1108,1091,1090,1181,1275,1366,1430,1451,1449,1424,1372,1320,1310,1401,1829,
    1332,1174,1120,1093,1076,1066,1123,1172,1226,1236,1251,1255,1252,1240,1301,1454,2532,
    1692,1231,1141,1096,1069,1048,1033,1024,1057,1069,1090,1122,1165,1223,1322,1622,5068
    };
    U16 lsc_tmpgr[] = {
    3145,1759,1502,1421,1359,1311,1286,1276,1293,1330,1410,1518,1664,1878,2282,5099,13867,
    1876,1507,1430,1365,1290,1229,1183,1196,1227,1277,1341,1415,1536,1727,2004,2801,11659,
    1554,1449,1396,1311,1222,1163,1173,1191,1220,1265,1319,1389,1484,1614,1856,2297,5822,
    1540,1449,1370,1275,1181,1171,1175,1188,1216,1254,1306,1369,1461,1575,1741,2089,3606,
    1564,1465,1354,1236,1194,1180,1178,1190,1211,1247,1294,1357,1437,1553,1708,1966,2803,
    1579,1468,1348,1236,1204,1185,1180,1189,1208,1237,1279,1339,1421,1529,1675,1886,2456,
    1612,1491,1352,1252,1218,1192,1186,1186,1203,1231,1267,1324,1406,1513,1648,1843,2280,
    1641,1510,1359,1264,1225,1197,1180,1182,1194,1217,1254,1309,1384,1485,1625,1813,2193,
    1678,1536,1368,1278,1232,1202,1183,1178,1184,1209,1241,1294,1370,1470,1607,1785,2135,
    1700,1551,1382,1288,1236,1198,1178,1168,1174,1193,1225,1278,1350,1450,1580,1760,2110,
    1726,1567,1394,1291,1236,1196,1173,1162,1164,1184,1214,1262,1329,1430,1558,1739,2090,
    1754,1585,1415,1287,1230,1189,1162,1149,1150,1166,1195,1245,1311,1408,1539,1712,2086,
    1775,1609,1437,1284,1224,1178,1146,1133,1135,1150,1179,1227,1293,1387,1517,1694,2088,
    1809,1631,1465,1298,1210,1162,1130,1115,1116,1127,1160,1205,1274,1367,1502,1699,2147,
    1858,1654,1499,1340,1197,1147,1110,1086,1090,1105,1136,1185,1255,1349,1487,1723,2384,
    2009,1707,1541,1392,1254,1129,1084,1058,1060,1076,1111,1169,1243,1343,1525,1835,3360,
    2600,1785,1584,1440,1311,1188,1092,1024,1026,1042,1081,1151,1253,1400,1603,2065,7072
    };
    U16 lsc_tmpgb[] = {
    2741,1524,1357,1325,1297,1282,1283,1285,1306,1340,1407,1495,1605,1768,2105,4648,12259,
    1558,1296,1269,1248,1212,1178,1154,1179,1217,1258,1307,1366,1453,1595,1807,2462,10221,
    1273,1225,1213,1174,1122,1095,1121,1150,1182,1219,1263,1314,1377,1459,1639,1976,4900,
    1246,1207,1171,1118,1067,1082,1104,1127,1156,1188,1226,1274,1330,1404,1512,1767,3011,
    1249,1197,1137,1068,1061,1073,1090,1109,1133,1162,1196,1239,1292,1361,1453,1631,2272,
    1247,1184,1116,1053,1057,1066,1079,1096,1116,1141,1171,1211,1259,1324,1409,1542,1959,
    1256,1187,1106,1056,1057,1063,1072,1085,1102,1125,1152,1189,1237,1296,1377,1495,1806,
    1271,1195,1103,1060,1058,1060,1066,1076,1090,1108,1134,1168,1214,1271,1348,1460,1724,
    1291,1209,1104,1066,1061,1059,1062,1069,1080,1097,1120,1152,1195,1251,1325,1433,1671,
    1312,1221,1116,1073,1063,1059,1058,1062,1071,1086,1108,1138,1179,1233,1305,1411,1648,
    1333,1239,1131,1080,1067,1059,1056,1059,1065,1079,1098,1128,1168,1222,1292,1399,1644,
    1363,1264,1158,1087,1070,1060,1055,1055,1060,1073,1091,1120,1158,1212,1282,1392,1649,
    1400,1296,1191,1095,1075,1061,1054,1052,1056,1067,1086,1114,1153,1205,1279,1390,1674,
    1448,1333,1231,1123,1079,1062,1052,1048,1051,1063,1081,1110,1149,1203,1282,1410,1748,
    1509,1380,1280,1177,1084,1064,1050,1039,1047,1061,1080,1111,1150,1207,1292,1462,1989,
    1651,1446,1344,1247,1159,1067,1045,1033,1039,1055,1079,1117,1161,1225,1351,1587,2883,
    2136,1538,1409,1319,1236,1149,1078,1024,1031,1048,1077,1125,1199,1306,1454,1827,6151
    };
    U16 lsc_tmpb[] = {
    3035,1519,1383,1361,1335,1313,1304,1303,1327,1359,1433,1524,1648,1820,2132,4430,12753,
    1612,1334,1322,1307,1274,1240,1214,1236,1275,1321,1372,1439,1531,1679,1893,2476,10131,
    1314,1290,1289,1257,1212,1185,1220,1251,1284,1326,1369,1420,1485,1570,1754,2072,4792,
    1307,1288,1262,1216,1176,1204,1237,1268,1300,1336,1378,1423,1472,1541,1646,1894,3016,
    1325,1294,1241,1180,1188,1218,1252,1283,1314,1343,1381,1420,1462,1511,1599,1776,2359,
    1335,1289,1223,1172,1200,1230,1267,1295,1323,1351,1377,1416,1453,1497,1571,1692,2089,
    1350,1293,1217,1180,1207,1236,1274,1299,1323,1346,1375,1404,1438,1474,1535,1643,1953,
    1363,1295,1216,1187,1211,1242,1272,1292,1314,1339,1363,1389,1421,1450,1504,1605,1869,
    1379,1309,1214,1196,1215,1248,1272,1295,1309,1333,1356,1382,1403,1431,1489,1579,1818,
    1395,1316,1223,1197,1216,1241,1265,1283,1301,1317,1340,1361,1383,1414,1459,1554,1787,
    1414,1330,1232,1198,1213,1236,1257,1273,1288,1304,1324,1340,1363,1392,1438,1531,1776,
    1444,1352,1255,1196,1205,1223,1240,1253,1265,1281,1299,1320,1341,1368,1425,1521,1779,
    1473,1374,1277,1193,1194,1201,1213,1225,1235,1251,1268,1289,1315,1348,1402,1508,1787,
    1518,1402,1307,1208,1174,1176,1183,1187,1195,1208,1229,1253,1282,1321,1393,1520,1850,
    1562,1437,1343,1243,1152,1145,1138,1131,1145,1161,1182,1211,1248,1300,1380,1552,2045,
    1684,1488,1386,1291,1203,1108,1086,1073,1087,1104,1131,1175,1222,1286,1411,1641,2823,
    2134,1563,1432,1340,1250,1159,1078,1024,1032,1046,1080,1140,1221,1330,1483,1819,5874
    };

#endif

    cfg->isp_gain = 1024 * 0.8;

    cfg->gic_str = 0.8;
    cfg->gic_thd = 1.25;

    cfg->r_gain = 1024 * 3.85;
    cfg->g_gain = 1024 * 1;
    cfg->b_gain = 1024 * 1.25;


    cfg->ltm_r = 20;
    cfg->ltm_str = 1.3;
    cfg->ltm_gain_limit_max = 2;
    cfg->ltm_gain_limit_min = 0.0;


    float ccm_tmp[9] = {
0,1,0,
0, 0,1,
0, 0, 1



    };

    cfg->defog_smp_ratio = 4;
    cfg->light_ratio = 1.0;
    cfg->defog_str = 0.15;

    U32 gamma_xtmp[GAMMA_LENGTH] =
    {
        0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,256,320,384,448,512,640,768,896,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4095
    };

    U32 gamma_ytmp[GAMMA_LENGTH] =
    {
        0,6,11,17,22,28,33,39,44,55,66,77,88,109,130,150,170,210,248,286,323,393,460,525,586,702,809,909,1002,1172,1323,1461,1587,1810,2003,2173,2325,2589,2812,3010,3191,3355,3499,3624,3736,3836,3927,4012,4095
    };

    cfg->ynr_r = 1;
    cfg->cnr_r = 3;

    cfg->txi_r_detail = 1;
    cfg->txi_r_bifilter = 1;
    cfg->txi_str = 20;

    //以下后处理
    U16 lsc_blk = cfg->lsc_wblock * cfg->lsc_hblock;
    cfg->lsc_rgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_bgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_grgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_gbgain = (U16*)malloc(sizeof(U16) * lsc_blk);

    memcpy(cfg->lsc_rgain, lsc_tmpr, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_bgain, lsc_tmpb, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_grgain, lsc_tmpgr, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_gbgain, lsc_tmpgb, sizeof(U16) * lsc_blk);


    memcpy(cfg->ccm, ccm_tmp, 9 * sizeof(float));
    if (cfg->rgb_bit > 12)
    {
        U8 shift = cfg->rgb_bit - 12;
        for (int i = 0; i < GAMMA_LENGTH; i++)
        {
            cfg->gamma_x[i] = gamma_xtmp[i] << shift;
            cfg->gamma_y[i] = gamma_ytmp[i] << shift;
        }
    }
    else if (cfg->rgb_bit < 12)
    {
        U8 shift = 12 - cfg->rgb_bit;
        for (int i = 0; i < GAMMA_LENGTH; i++)
        {
            cfg->gamma_x[i] = gamma_xtmp[i] >> shift;
            cfg->gamma_y[i] = gamma_ytmp[i] >> shift;
        }
    }

    return;
}

// 从 INI 文件加载配置
void load_cfg_from_ini(const char* filename, G_CONFIG* cfg) {
    FILE* f = fopen(filename, "r");
    if (!f) {
        perror("fopen");
        return;
    }
    // 初始化默认值
    memset(cfg, 0, sizeof(*cfg));
    cfg->order = LITTLE_ENDIAN;
    cfg->pattern = BGGR;
    cfg->lsc_rgain = NULL;

    char line[256], section[64] = { 0 };
    while (fgets(line, sizeof(line), f)) {
        char* p = trim(line);
        if (*p == 0 || *p == ';') continue;
        if (*p == '[') {
            char* end = strchr(p, ']');
            if (end) {
                size_t len = end - p - 1;
                strncpy(section, p + 1, len);
                section[len] = '\0';
            }
            continue;
        }
        char* eq = strchr(p, '=');
        if (!eq) continue;
        *eq = '\0';
        char* key = trim(p), * val = trim(eq + 1);

        if (strcmp(section, "raw_param") == 0) {
            if (strcmp(key, "bit") == 0) cfg->bit = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "used_bit") == 0) cfg->used_bit = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "order") == 0) cfg->order = parse_order(val);
            else if (strcmp(key, "pattern") == 0) cfg->pattern = parse_pattern(val);
        }
        else if (strcmp(section, "module_on") == 0) {
            if (strcmp(key, "ob_on") == 0) cfg->ob_on = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "lsc_on") == 0) cfg->lsc_on = (U8)strtoul(val, NULL, 0);
        }
        else if (strcmp(section, "ob") == 0) {
            if (strcmp(key, "ob") == 0) cfg->ob = (U16)(eval_simple_expr(val) + 0.5);
        }
        else if (strcmp(section, "lsc") == 0) {
            if (strcmp(key, "lsc_rgain") == 0) parse_u16_array(val, &cfg->lsc_rgain);
        }
        else if (strcmp(section, "awb") == 0) {
            if (strcmp(key, "r_gain") == 0) cfg->r_gain = (U16)(eval_simple_expr(val) + 0.5);
        }
        else if (strcmp(section, "ccm") == 0) {
            if (strcmp(key, "ccm") == 0) parse_float_array9(val, cfg->ccm);
        }
    }
    fclose(f);
}

// 去除首尾空白
static char* trim(char* s) {
    char* end;
    while (isspace((unsigned char)*s)) s++;
    if (*s == 0) return s;
    end = s + strlen(s) - 1;
    while (end > s && isspace((unsigned char)*end)) end--;
    *(end + 1) = 0;
    return s;
}

// 解析字节顺序
static ByteOrder parse_order(const char* s) {
    return (strcasecmp(s, "BIG_ENDIAN") == 0) ? BIG_ENDIAN : LITTLE_ENDIAN;
}

// 解析 Bayer 格式
static BayerPattern parse_pattern(const char* s) {
    if (strcasecmp(s, "RGGB") == 0) return RGGB;
    else if (strcasecmp(s, "GRBG") == 0) return GRBG;
    else if (strcasecmp(s, "GBRG") == 0) return GBRG;
    else                                   return BGGR;
}

// 计算简单表达式：支持 a 或 a*b
static double eval_simple_expr(const char* s) {
    char* star = (char*)malloc(strlen(s) + 1);
    strcpy(star, s);
    if (!star) {
        return strtod(s, NULL);
    }
    else {
        double a = strtod(s, NULL);
        double b = strtod(star + 1, NULL);
        return a * b;
    }
}

// 解析 U16 数组，返回元素个数
static int parse_u16_array(const char* s, U16** out) {
    // 定位到 '[' 并跳过
    while (*s && *s != '[') s++;
    if (*s == '[') s++;
    size_t cap = 4, cnt = 0;
    U16* arr = (U16*)malloc(cap * sizeof(U16));
    char* copy = strdup(s);
    char* rb = strchr(copy, ']');
    if (rb) *rb = '\0';

    char* tok = strtok(copy, ",");
    while (tok) {
        double v = eval_simple_expr(trim(tok));
        if (cnt >= cap) {
            cap *= 2;
            arr = (U16*)realloc(arr, cap * sizeof(U16));
        }
        arr[cnt++] = (U16)(v + 0.5);
        tok = strtok(NULL, ",");
    }

    free(copy);
    *out = arr;
    return (int)cnt;
}

// 解析 9 元素 float 数组
static void parse_float_array9(const char* s, float out[9]) {
    while (*s && *s != '[') s++;
    if (*s == '[') s++;
    char* copy = strdup(s);
    char* rb = strchr(copy, ']');
    if (rb) *rb = '\0';

    int idx = 0;
    char* tok = strtok(copy, ",");
    while (tok && idx < 9) {
        out[idx++] = (float)eval_simple_expr(trim(tok));
        tok = strtok(NULL, ",");
    }

    free(copy);
}
