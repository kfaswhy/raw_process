#pragma once

#include "load_ini.h"

#define strcasecmp _stricmp 

void load_cfg(G_CONFIG* cfg)
{
	cfg->bit = 16;
	cfg->used_bit = 10;
	cfg->order = LITTLE_ENDIAN;
	cfg->pattern = BGGR;
	cfg->width = 1280;
	cfg->height = 720;

	cfg->rgb_bit = 16;
	cfg->yuv_bit = 16;

	cfg->ob_on = 1;
	cfg->lsc_on = 1;
	cfg->isp_gain_on = 1;
	cfg->awb_on = 1;
	cfg->ltm_on = 0;
	cfg->ccm_on = 1;
	cfg->rgbgamma_on = 1;
	cfg->defog_on = 0;
	//cfg->ygamma_on = 0;
	cfg->sharp_on = 0;
	cfg->ynr_on = 1;
	cfg->cnr_on = 1;
	cfg->yuv_txi_on = 1;

	//12->16bit
	cfg->ob = 64 * 16;


	cfg->lsc_type = 0; //0为插值
	cfg->lsc_wblock = 17;
	cfg->lsc_hblock = 17;
#if 1
	U16 lsc_tmpr[] = {
	1362,1351,1300,1286,1216,1196,1153,1183,1164,1162,1152,1197,1245,1297,1311,1408,1514,
	1407,1378,1309,1254,1184,1162,1146,1160,1157,1149,1153,1197,1227,1281,1332,1450,1554,
	1415,1372,1306,1228,1168,1126,1114,1107,1114,1119,1143,1175,1192,1259,1338,1439,1492,
	1364,1330,1275,1220,1160,1122,1097,1102,1114,1123,1136,1167,1193,1265,1361,1439,1480,
	1316,1278,1242,1196,1157,1106,1067,1068,1081,1099,1116,1146,1189,1251,1325,1394,1439,
	1386,1293,1200,1163,1127,1089,1076,1085,1099,1104,1111,1143,1178,1231,1325,1427,1515,
	1364,1292,1210,1146,1118,1079,1090,1078,1097,1096,1114,1138,1168,1221,1321,1425,1509,
	1345,1281,1200,1135,1095,1057,1085,1079,1089,1083,1089,1107,1131,1208,1309,1428,1507,
	1280,1247,1195,1110,1080,1054,1060,1062,1078,1078,1070,1092,1121,1200,1281,1433,1548,
	1273,1239,1181,1118,1072,1047,1036,1055,1064,1068,1059,1090,1118,1187,1239,1417,1552,
	1313,1246,1167,1107,1079,1062,1039,1062,1074,1080,1081,1115,1147,1200,1240,1413,1543,
	1312,1238,1154,1103,1087,1075,1057,1059,1060,1067,1088,1119,1151,1193,1234,1373,1476,
	1275,1233,1162,1109,1090,1083,1081,1062,1070,1061,1085,1104,1146,1206,1260,1386,1471,
	1250,1231,1172,1108,1079,1079,1081,1058,1061,1062,1092,1103,1141,1193,1272,1401,1499,
	1338,1294,1211,1138,1090,1072,1076,1066,1082,1083,1104,1111,1139,1197,1277,1416,1510,
	1471,1385,1253,1174,1120,1093,1086,1065,1070,1100,1137,1154,1188,1217,1297,1431,1554,
	1559,1464,1299,1226,1157,1117,1113,1071,1076,1117,1157,1180,1228,1248,1314,1428,1555,
	1539,1480,1329,1257,1171,1132,1132,1070,1067,1118,1179,1208,1285,1288,1340,1433,1575
	};
	U16 lsc_tmpgr[] = {
	1122,1109,1080,1059,1047,1061,1069,1077,1060,1041,1032,1038,1057,1072,1080,1079,1078,
	1154,1116,1072,1059,1054,1062,1072,1071,1061,1048,1046,1049,1051,1059,1071,1092,1112,
	1176,1123,1064,1055,1058,1058,1066,1055,1054,1048,1052,1053,1055,1052,1061,1085,1115,
	1166,1118,1068,1066,1069,1064,1062,1052,1053,1055,1058,1060,1051,1046,1052,1079,1111,
	1142,1102,1061,1064,1068,1063,1056,1055,1057,1051,1047,1048,1046,1039,1053,1076,1108,
	1130,1087,1051,1066,1073,1065,1053,1057,1056,1049,1042,1047,1040,1039,1052,1076,1098,
	1082,1067,1051,1056,1055,1058,1055,1061,1060,1045,1050,1056,1061,1065,1074,1103,1121,
	1072,1059,1049,1055,1061,1063,1054,1047,1045,1040,1052,1059,1066,1068,1070,1100,1122,
	1063,1053,1049,1053,1061,1061,1056,1045,1041,1039,1052,1052,1058,1056,1062,1097,1126,
	1061,1043,1039,1049,1065,1060,1052,1044,1043,1041,1036,1038,1043,1046,1050,1082,1112,
	1055,1040,1036,1046,1055,1051,1047,1050,1046,1040,1030,1037,1039,1043,1048,1068,1083,
	1056,1048,1045,1045,1045,1048,1047,1055,1050,1043,1036,1050,1056,1058,1050,1065,1078,
	1078,1060,1052,1054,1050,1043,1038,1053,1048,1047,1039,1049,1048,1046,1044,1056,1068,
	1070,1059,1059,1055,1053,1044,1041,1050,1044,1050,1045,1055,1050,1049,1045,1062,1075,
	1092,1072,1059,1058,1054,1043,1039,1044,1048,1054,1054,1049,1041,1037,1049,1060,1068,
	1122,1097,1060,1056,1053,1051,1057,1044,1054,1049,1053,1041,1036,1038,1053,1080,1101,
	1180,1132,1060,1058,1054,1056,1065,1044,1062,1049,1054,1033,1032,1039,1055,1087,1111,
	1197,1141,1057,1058,1060,1063,1076,1045,1061,1046,1046,1027,1024,1041,1058,1110,1145
	};
	U16 lsc_tmpgb[] = {
	1058,1042,1037,1065,1065,1068,1054,1074,1072,1073,1069,1063,1051,1053,1051,1066,1067,
	1094,1069,1042,1052,1048,1053,1047,1056,1060,1062,1059,1048,1043,1044,1055,1075,1088,
	1089,1072,1042,1038,1027,1032,1032,1032,1042,1046,1046,1033,1032,1035,1049,1075,1096,
	1070,1061,1041,1039,1036,1044,1044,1036,1039,1039,1042,1031,1034,1032,1047,1073,1100,
	1037,1041,1037,1035,1035,1041,1046,1044,1045,1039,1040,1037,1038,1041,1040,1076,1103,
	1034,1035,1033,1035,1040,1047,1047,1046,1044,1043,1049,1046,1044,1039,1039,1066,1086,
	1047,1044,1039,1035,1033,1039,1040,1050,1046,1046,1051,1051,1046,1038,1037,1058,1070,
	1041,1042,1038,1038,1039,1044,1040,1041,1039,1047,1053,1049,1041,1033,1039,1048,1054,
	1046,1046,1044,1035,1036,1045,1046,1047,1038,1046,1048,1050,1042,1041,1038,1046,1047,
	1037,1043,1043,1035,1035,1043,1043,1038,1032,1039,1040,1043,1035,1040,1038,1051,1057,
	1035,1036,1039,1030,1030,1034,1035,1034,1028,1036,1045,1052,1045,1047,1038,1039,1035,
	1030,1031,1039,1035,1040,1033,1035,1035,1037,1040,1042,1041,1039,1038,1044,1044,1043,
	1026,1030,1038,1037,1040,1039,1043,1046,1044,1047,1045,1045,1046,1050,1055,1046,1034,
	1032,1033,1043,1047,1053,1047,1047,1049,1046,1045,1034,1032,1034,1044,1055,1055,1048,
	1066,1051,1042,1044,1049,1049,1047,1049,1041,1045,1036,1037,1034,1050,1060,1062,1049,
	1066,1063,1054,1055,1058,1052,1050,1044,1047,1049,1038,1031,1034,1048,1059,1077,1087,
	1058,1074,1062,1060,1053,1053,1059,1049,1059,1058,1045,1033,1042,1052,1058,1083,1110,
	1024,1071,1071,1072,1056,1056,1064,1050,1070,1061,1048,1028,1050,1055,1054,1091,1140
	};
	U16 lsc_tmpb[] = {
	1065,1065,1062,1040,1034,1029,1034,1030,1059,1065,1075,1048,1044,1033,1031,1024,1024,
	1047,1047,1058,1057,1055,1041,1038,1036,1051,1047,1059,1047,1048,1037,1031,1025,1024,
	1033,1033,1048,1060,1061,1051,1042,1045,1044,1041,1047,1052,1056,1045,1037,1025,1024,
	1056,1047,1048,1063,1063,1052,1038,1039,1041,1047,1053,1055,1050,1040,1039,1033,1031,
	1056,1055,1049,1060,1054,1052,1037,1043,1043,1056,1051,1052,1048,1042,1047,1037,1036,
	1059,1058,1052,1055,1061,1054,1048,1041,1049,1054,1047,1045,1040,1047,1051,1047,1036,
	1031,1046,1049,1058,1061,1062,1057,1051,1048,1054,1045,1047,1045,1058,1061,1052,1037,
	1037,1051,1062,1059,1067,1071,1073,1054,1048,1050,1050,1050,1046,1064,1059,1054,1032,
	1040,1055,1069,1063,1061,1066,1068,1056,1044,1046,1048,1058,1054,1069,1062,1059,1044,
	1043,1061,1092,1081,1083,1065,1070,1055,1048,1048,1046,1055,1050,1066,1056,1054,1037,
	1037,1047,1071,1071,1073,1055,1059,1055,1052,1055,1045,1054,1046,1058,1054,1054,1048,
	1042,1064,1085,1088,1081,1058,1053,1052,1060,1064,1054,1045,1041,1044,1048,1050,1048,
	1055,1076,1080,1085,1073,1069,1064,1060,1065,1059,1054,1044,1039,1035,1036,1045,1054,
	1079,1098,1095,1086,1067,1062,1065,1064,1070,1059,1055,1048,1043,1036,1034,1040,1043,
	1065,1074,1068,1070,1060,1072,1077,1079,1070,1052,1044,1043,1044,1049,1041,1038,1032,
	1093,1071,1041,1052,1047,1062,1069,1079,1067,1055,1052,1058,1061,1061,1056,1038,1028,
	1114,1071,1027,1049,1049,1070,1075,1080,1062,1053,1059,1063,1071,1069,1069,1041,1031,
	1158,1093,1027,1046,1046,1063,1074,1075,1058,1055,1070,1076,1080,1063,1068,1035,1035
	};
#endif

	cfg->isp_gain = 1024 * 1.88;

	cfg->r_gain = 1024 * 1.95;
	cfg->g_gain = 1024 * 1;
	cfg->b_gain = 1024 * 1.13;


	cfg->ltm_r = 20;
	cfg->ltm_str = 1.3;
	cfg->ltm_gain_limit_max = 2;
	cfg->ltm_gain_limit_min = 0.0;


	float ccm_tmp[9] = {
	1.11, -0.11, -0.01,
	-0.16, 1.43, -0.28,
	0.05, -0.32, 1.30



	};

	U32 gamma_xtmp[GAMMA_LENGTH] =
	{
	0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,256,320,384,448,512,640,768,896,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4095
	};

	U32 gamma_ytmp[GAMMA_LENGTH] =
	{
	0,6,11,17,22,28,33,39,44,55,66,77,88,109,130,150,170,210,248,286,323,393,460,525,586,702,809,909,1002,1172,1323,1461,1587,1810,2003,2173,2325,2589,2812,3010,3191,3355,3499,3624,3736,3836,3927,4012,4095
	};

	cfg->ynr_r = 1;
	cfg->cnr_r = 3;

	cfg->txi_r_detail = 1;
	cfg->txi_r_bifilter = 1;
	cfg->txi_str = 5;

	//以下后处理
	U16 lsc_blk = cfg->lsc_wblock * cfg->lsc_hblock;
	cfg->lsc_rgain = (U16*)malloc(sizeof(U16) * lsc_blk);
	cfg->lsc_bgain = (U16*)malloc(sizeof(U16) * lsc_blk);
	cfg->lsc_grgain = (U16*)malloc(sizeof(U16) * lsc_blk);
	cfg->lsc_gbgain = (U16*)malloc(sizeof(U16) * lsc_blk);

	memcpy(cfg->lsc_rgain, lsc_tmpr, sizeof(U16) * lsc_blk);
	memcpy(cfg->lsc_bgain, lsc_tmpb, sizeof(U16) * lsc_blk);
	memcpy(cfg->lsc_grgain, lsc_tmpgr, sizeof(U16) * lsc_blk);
	memcpy(cfg->lsc_gbgain, lsc_tmpgb, sizeof(U16) * lsc_blk);


	memcpy(cfg->ccm, ccm_tmp, 9 * sizeof(float));
	if (cfg->rgb_bit > 12)
	{
		U8 shift = cfg->rgb_bit - 12;
		for (int i = 0; i < GAMMA_LENGTH; i++)
		{
			cfg->gamma_x[i] = gamma_xtmp[i] << shift;
			cfg->gamma_y[i] = gamma_ytmp[i] << shift;
		}
	}
	else if (cfg->rgb_bit < 12)
	{
		U8 shift = 12 - cfg->rgb_bit;
		for (int i = 0; i < GAMMA_LENGTH; i++)
		{
			cfg->gamma_x[i] = gamma_xtmp[i] >> shift;
			cfg->gamma_y[i] = gamma_ytmp[i] >> shift;
		}
	}

	return;
}

// 从 INI 文件加载配置
void load_cfg_from_ini(const char* filename, G_CONFIG* cfg) {
	FILE* f = fopen(filename, "r");
	if (!f) {
		perror("fopen");
		return;
	}
	// 初始化默认值
	memset(cfg, 0, sizeof(*cfg));
	cfg->order = LITTLE_ENDIAN;
	cfg->pattern = BGGR;
	cfg->lsc_rgain = NULL;

	char line[256], section[64] = { 0 };
	while (fgets(line, sizeof(line), f)) {
		char* p = trim(line);
		if (*p == 0 || *p == ';') continue;
		if (*p == '[') {
			char* end = strchr(p, ']');
			if (end) {
				size_t len = end - p - 1;
				strncpy(section, p + 1, len);
				section[len] = '\0';
			}
			continue;
		}
		char* eq = strchr(p, '=');
		if (!eq) continue;
		*eq = '\0';
		char* key = trim(p), * val = trim(eq + 1);

		if (strcmp(section, "raw_param") == 0) {
			if (strcmp(key, "bit") == 0) cfg->bit = (U8)strtoul(val, NULL, 0);
			else if (strcmp(key, "used_bit") == 0) cfg->used_bit = (U8)strtoul(val, NULL, 0);
			else if (strcmp(key, "order") == 0) cfg->order = parse_order(val);
			else if (strcmp(key, "pattern") == 0) cfg->pattern = parse_pattern(val);
		}
		else if (strcmp(section, "module_on") == 0) {
			if (strcmp(key, "ob_on") == 0) cfg->ob_on = (U8)strtoul(val, NULL, 0);
			else if (strcmp(key, "lsc_on") == 0) cfg->lsc_on = (U8)strtoul(val, NULL, 0);
		}
		else if (strcmp(section, "ob") == 0) {
			if (strcmp(key, "ob") == 0) cfg->ob = (U16)(eval_simple_expr(val) + 0.5);
		}
		else if (strcmp(section, "lsc") == 0) {
			if (strcmp(key, "lsc_rgain") == 0) parse_u16_array(val, &cfg->lsc_rgain);
		}
		else if (strcmp(section, "awb") == 0) {
			if (strcmp(key, "r_gain") == 0) cfg->r_gain = (U16)(eval_simple_expr(val) + 0.5);
		}
		else if (strcmp(section, "ccm") == 0) {
			if (strcmp(key, "ccm") == 0) parse_float_array9(val, cfg->ccm);
		}
	}
	fclose(f);
}

// 去除首尾空白
static char* trim(char* s) {
	char* end;
	while (isspace((unsigned char)*s)) s++;
	if (*s == 0) return s;
	end = s + strlen(s) - 1;
	while (end > s && isspace((unsigned char)*end)) end--;
	*(end + 1) = 0;
	return s;
}

// 解析字节顺序
static ByteOrder parse_order(const char* s) {
	return (strcasecmp(s, "BIG_ENDIAN") == 0) ? BIG_ENDIAN : LITTLE_ENDIAN;
}

// 解析 Bayer 格式
static BayerPattern parse_pattern(const char* s) {
	if (strcasecmp(s, "RGGB") == 0) return RGGB;
	else if (strcasecmp(s, "GRBG") == 0) return GRBG;
	else if (strcasecmp(s, "GBRG") == 0) return GBRG;
	else   return BGGR;
}

// 计算简单表达式：支持 a 或 a*b
static double eval_simple_expr(const char* s) {
	char* star = (char*)malloc(strlen(s) + 1);
	strcpy(star, s);
	if (!star) {
		return strtod(s, NULL);
	}
	else {
		double a = strtod(s, NULL);
		double b = strtod(star + 1, NULL);
		return a * b;
	}
}

// 解析 U16 数组，返回元素个数
static int parse_u16_array(const char* s, U16** out) {
	// 定位到 '[' 并跳过
	while (*s && *s != '[') s++;
	if (*s == '[') s++;
	size_t cap = 4, cnt = 0;
	U16* arr = (U16*)malloc(cap * sizeof(U16));
	char* copy = strdup(s);
	char* rb = strchr(copy, ']');
	if (rb) *rb = '\0';

	char* tok = strtok(copy, ",");
	while (tok) {
		double v = eval_simple_expr(trim(tok));
		if (cnt >= cap) {
			cap *= 2;
			arr = (U16*)realloc(arr, cap * sizeof(U16));
		}
		arr[cnt++] = (U16)(v + 0.5);
		tok = strtok(NULL, ",");
	}

	free(copy);
	*out = arr;
	return (int)cnt;
}

// 解析 9 元素 float 数组
static void parse_float_array9(const char* s, float out[9]) {
	while (*s && *s != '[') s++;
	if (*s == '[') s++;
	char* copy = strdup(s);
	char* rb = strchr(copy, ']');
	if (rb) *rb = '\0';

	int idx = 0;
	char* tok = strtok(copy, ",");
	while (tok && idx < 9) {
		out[idx++] = (float)eval_simple_expr(trim(tok));
		tok = strtok(NULL, ",");
	}

	free(copy);
}
