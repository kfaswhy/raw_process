#pragma once

#include "load_ini.h"

#define strcasecmp _stricmp 

void load_cfg(G_CONFIG* cfg)
{
    cfg->bit = 16;
    cfg->used_bit = 10;
    cfg->order = LITTLE_ENDIAN;
    cfg->pattern = BGGR;
    cfg->width = 1440;
    cfg->height = 1048;

    cfg->rgb_bit = 16;
    cfg->yuv_bit = 16;

    cfg->ob_on = 1;
    cfg->lsc_on = 1;
    cfg->gic_on = 1;
    cfg->isp_gain_on = 1;
    cfg->awb_on = 1;
    cfg->ltm_on = 0;
    cfg->ccm_on = 1;
    cfg->rgbgamma_on = 1;
    cfg->defog_on = 0;
    //cfg->ygamma_on = 0;
    cfg->sharp_on = 0;
    cfg->ynr_on = 1;
    cfg->cnr_on = 1;
    cfg->yuv_txi_on = 1;

    //12->16bit
    cfg->ob = 64 * 16;


    cfg->lsc_type = 0; //0为插值
    cfg->lsc_wblock = 17;
    cfg->lsc_hblock = 17;
#if 1
    U16 lsc_tmpr[] = {
    1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,
    1024,1024,1024,1024,1024,1024,1024,1059,1093,1115,1092,1053,1024,1024,1024,1024,1024,
    1024,1024,1024,1024,1024,1050,1140,1216,1266,1284,1242,1190,1111,1025,1024,1024,1024,
    1024,1024,1024,1024,1044,1163,1295,1404,1478,1493,1438,1351,1234,1111,1024,1024,1024,
    1024,1024,1024,1024,1125,1287,1466,1615,1709,1741,1665,1537,1370,1207,1080,1024,1024,
    1024,1024,1024,1048,1199,1400,1629,1819,1950,1984,1885,1713,1498,1287,1125,1024,1024,
    1024,1024,1024,1084,1263,1497,1767,2001,2142,2181,2068,1858,1600,1351,1160,1036,1024,
    1024,1024,1024,1111,1308,1567,1866,2124,2287,2317,2198,1978,1686,1395,1191,1057,1024,
    1024,1024,1024,1126,1328,1600,1919,2198,2358,2391,2269,2043,1727,1434,1219,1080,1024,
    1024,1024,1024,1123,1328,1596,1919,2197,2349,2385,2272,2033,1727,1430,1220,1072,1024,
    1024,1024,1024,1110,1301,1555,1853,2118,2267,2291,2187,1955,1668,1402,1203,1062,1024,
    1024,1024,1024,1078,1252,1483,1736,1960,2103,2107,2025,1829,1584,1345,1175,1049,1024,
    1024,1024,1024,1041,1188,1373,1587,1767,1882,1885,1818,1666,1481,1291,1135,1031,1024,
    1024,1024,1024,1024,1112,1260,1422,1561,1639,1641,1597,1491,1360,1206,1091,1024,1024,
    1024,1024,1024,1024,1030,1137,1244,1347,1399,1401,1374,1313,1222,1120,1039,1024,1024,
    1024,1024,1024,1024,1024,1024,1101,1162,1209,1200,1188,1151,1105,1037,1024,1024,1024,
    1024,1024,1024,1024,1024,1024,1024,1024,1055,1051,1037,1024,1024,1024,1024,1024,1024
    };
    U16 lsc_tmpgr[] = {
    1604,1587,1484,1401,1311,1228,1161,1105,1075,1060,1086,1124,1185,1262,1340,1494,1855,
    1579,1525,1446,1356,1248,1150,1062,1039,1033,1040,1051,1061,1106,1193,1292,1398,1687,
    1565,1493,1419,1304,1179,1088,1072,1061,1057,1063,1070,1083,1104,1133,1241,1359,1566,
    1562,1483,1385,1260,1134,1109,1090,1080,1078,1081,1091,1101,1125,1149,1185,1319,1473,
    1568,1480,1356,1209,1153,1127,1107,1099,1095,1099,1108,1122,1139,1169,1204,1285,1445,
    1569,1466,1337,1202,1167,1139,1120,1111,1109,1111,1119,1133,1156,1183,1218,1259,1413,
    1576,1470,1325,1215,1180,1149,1133,1120,1118,1121,1127,1141,1164,1196,1226,1263,1395,
    1580,1469,1315,1222,1186,1157,1134,1125,1122,1125,1133,1148,1168,1197,1235,1272,1382,
    1590,1475,1308,1228,1190,1163,1141,1129,1123,1129,1135,1151,1174,1204,1242,1276,1367,
    1587,1472,1312,1230,1191,1159,1141,1127,1123,1125,1133,1150,1173,1205,1240,1278,1369,
    1586,1471,1311,1225,1187,1157,1138,1124,1120,1124,1133,1146,1166,1199,1235,1273,1369,
    1584,1473,1326,1213,1178,1149,1128,1116,1111,1113,1122,1139,1160,1190,1230,1260,1366,
    1573,1481,1341,1201,1166,1137,1114,1103,1101,1104,1112,1128,1149,1179,1215,1248,1349,
    1565,1484,1363,1214,1149,1121,1100,1090,1088,1086,1099,1112,1136,1164,1200,1249,1340,
    1546,1482,1386,1258,1131,1104,1083,1071,1067,1067,1078,1093,1118,1145,1179,1260,1335,
    1545,1489,1409,1305,1194,1085,1063,1049,1045,1045,1055,1072,1097,1123,1201,1293,1359,
    1574,1485,1422,1346,1256,1161,1083,1024,1024,1024,1028,1051,1102,1173,1242,1304,1429
    };
    U16 lsc_tmpgb[] = {
    1398,1375,1340,1306,1251,1200,1158,1113,1086,1068,1084,1107,1143,1188,1236,1362,1640,
    1311,1312,1283,1240,1172,1102,1036,1024,1024,1024,1024,1024,1046,1102,1165,1229,1479,
    1282,1263,1233,1168,1082,1024,1024,1024,1024,1024,1024,1024,1024,1024,1096,1169,1318,
    1264,1235,1184,1104,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1029,1116,1230,
    1252,1209,1139,1045,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1066,1171,
    1239,1182,1107,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1030,1127,
    1228,1170,1084,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1105,
    1224,1163,1067,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1087,
    1223,1161,1056,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1070,
    1225,1159,1060,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1069,
    1225,1163,1064,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1077,
    1231,1175,1085,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1080,
    1241,1193,1111,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1082,
    1253,1213,1145,1051,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1037,1091,
    1256,1237,1183,1105,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1024,1069,1114,
    1270,1262,1229,1169,1103,1025,1024,1024,1024,1024,1024,1024,1024,1024,1064,1118,1166,
    1293,1280,1265,1233,1184,1123,1069,1024,1029,1030,1024,1027,1054,1094,1127,1154,1243
    };
    U16 lsc_tmpb[] = {
    1548,1371,1366,1342,1288,1229,1177,1128,1103,1083,1104,1129,1174,1223,1252,1298,1706,
    1357,1350,1337,1299,1232,1160,1090,1074,1073,1076,1075,1079,1102,1160,1220,1236,1466,
    1324,1329,1310,1250,1169,1109,1115,1114,1113,1114,1110,1107,1105,1102,1173,1226,1289,
    1326,1318,1276,1201,1129,1140,1148,1153,1152,1152,1151,1144,1134,1124,1120,1196,1232,
    1328,1307,1243,1155,1147,1163,1177,1185,1188,1184,1183,1174,1159,1137,1127,1161,1216,
    1326,1287,1213,1140,1163,1182,1203,1210,1214,1213,1205,1198,1182,1158,1142,1130,1202,
    1320,1275,1193,1145,1170,1191,1217,1226,1230,1226,1223,1210,1191,1165,1142,1126,1195,
    1312,1260,1176,1147,1173,1200,1222,1230,1235,1238,1231,1218,1199,1169,1143,1126,1178,
    1307,1257,1161,1149,1173,1207,1227,1241,1242,1245,1240,1229,1203,1172,1151,1129,1164,
    1303,1249,1161,1143,1172,1200,1225,1238,1244,1242,1239,1225,1202,1175,1145,1128,1159,
    1299,1249,1159,1136,1165,1196,1219,1231,1239,1238,1235,1217,1195,1167,1140,1121,1163,
    1304,1257,1176,1127,1154,1182,1204,1217,1223,1223,1220,1207,1186,1156,1139,1119,1165,
    1305,1265,1191,1116,1138,1160,1179,1193,1198,1201,1196,1185,1168,1146,1123,1111,1155,
    1313,1275,1216,1130,1115,1134,1152,1160,1165,1164,1165,1156,1143,1125,1113,1118,1155,
    1300,1288,1242,1167,1089,1102,1110,1115,1120,1121,1121,1117,1112,1103,1094,1135,1145,
    1295,1298,1268,1210,1145,1065,1065,1064,1072,1072,1074,1078,1078,1075,1111,1156,1142,
    1292,1301,1286,1252,1198,1133,1069,1024,1030,1028,1027,1041,1074,1114,1149,1149,1187
    };

#endif

    cfg->isp_gain = 1024 * 0.8;

    cfg->gic_str = 0.8;
    cfg->gic_thd = 1.25;
     
    cfg->r_gain = 1024 * 1.65;
    cfg->g_gain = 1024 * 1;
    cfg->b_gain = 1024 * 1.73;


    cfg->ltm_r = 20;
    cfg->ltm_str = 1.3;
    cfg->ltm_gain_limit_max = 2;
    cfg->ltm_gain_limit_min = 0.0;


    float ccm_tmp[9] = {
1.00, 	0.85, - 0.36,
0.60, - 0.73, 	1.02,
0.51, - 0.72, 	1.00
    };

    


    cfg->defog_smp_ratio = 4;
    cfg->light_ratio = 1.0;
    cfg->defog_str = 0.15;

    U32 gamma_xtmp[GAMMA_LENGTH] =
    {
        0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,256,320,384,448,512,640,768,896,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4095
    };

    U32 gamma_ytmp[GAMMA_LENGTH] =
    {
        0,6,11,17,22,28,33,39,44,55,66,77,88,109,130,150,170,210,248,286,323,393,460,525,586,702,809,909,1002,1172,1323,1461,1587,1810,2003,2173,2325,2589,2812,3010,3191,3355,3499,3624,3736,3836,3927,4012,4095
    };

    cfg->ynr_r = 1;
    cfg->cnr_r = 3;

    cfg->txi_r_detail = 1;
    cfg->txi_r_bifilter = 1;
    cfg->txi_str = 20;

    //以下后处理
    U16 lsc_blk = cfg->lsc_wblock * cfg->lsc_hblock;
    cfg->lsc_rgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_bgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_grgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_gbgain = (U16*)malloc(sizeof(U16) * lsc_blk);

    memcpy(cfg->lsc_rgain, lsc_tmpr, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_bgain, lsc_tmpb, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_grgain, lsc_tmpgr, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_gbgain, lsc_tmpgb, sizeof(U16) * lsc_blk);


    memcpy(cfg->ccm, ccm_tmp, 9 * sizeof(float));
    if (cfg->rgb_bit > 12)
    {
        U8 shift = cfg->rgb_bit - 12;
        for (int i = 0; i < GAMMA_LENGTH; i++)
        {
            cfg->gamma_x[i] = gamma_xtmp[i] << shift;
            cfg->gamma_y[i] = gamma_ytmp[i] << shift;
        }
    }
    else if (cfg->rgb_bit < 12)
    {
        U8 shift = 12 - cfg->rgb_bit;
        for (int i = 0; i < GAMMA_LENGTH; i++)
        {
            cfg->gamma_x[i] = gamma_xtmp[i] >> shift;
            cfg->gamma_y[i] = gamma_ytmp[i] >> shift;
        }
    }

    return;
}

// 从 INI 文件加载配置
void load_cfg_from_ini(const char* filename, G_CONFIG* cfg) {
    FILE* f = fopen(filename, "r");
    if (!f) {
        perror("fopen");
        return;
    }
    // 初始化默认值
    memset(cfg, 0, sizeof(*cfg));
    cfg->order = LITTLE_ENDIAN;
    cfg->pattern = BGGR;
    cfg->lsc_rgain = NULL;

    char line[256], section[64] = { 0 };
    while (fgets(line, sizeof(line), f)) {
        char* p = trim(line);
        if (*p == 0 || *p == ';') continue;
        if (*p == '[') {
            char* end = strchr(p, ']');
            if (end) {
                size_t len = end - p - 1;
                strncpy(section, p + 1, len);
                section[len] = '\0';
            }
            continue;
        }
        char* eq = strchr(p, '=');
        if (!eq) continue;
        *eq = '\0';
        char* key = trim(p), * val = trim(eq + 1);

        if (strcmp(section, "raw_param") == 0) {
            if (strcmp(key, "bit") == 0) cfg->bit = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "used_bit") == 0) cfg->used_bit = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "order") == 0) cfg->order = parse_order(val);
            else if (strcmp(key, "pattern") == 0) cfg->pattern = parse_pattern(val);
        }
        else if (strcmp(section, "module_on") == 0) {
            if (strcmp(key, "ob_on") == 0) cfg->ob_on = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "lsc_on") == 0) cfg->lsc_on = (U8)strtoul(val, NULL, 0);
        }
        else if (strcmp(section, "ob") == 0) {
            if (strcmp(key, "ob") == 0) cfg->ob = (U16)(eval_simple_expr(val) + 0.5);
        }
        else if (strcmp(section, "lsc") == 0) {
            if (strcmp(key, "lsc_rgain") == 0) parse_u16_array(val, &cfg->lsc_rgain);
        }
        else if (strcmp(section, "awb") == 0) {
            if (strcmp(key, "r_gain") == 0) cfg->r_gain = (U16)(eval_simple_expr(val) + 0.5);
        }
        else if (strcmp(section, "ccm") == 0) {
            if (strcmp(key, "ccm") == 0) parse_float_array9(val, cfg->ccm);
        }
    }
    fclose(f);
}

// 去除首尾空白
static char* trim(char* s) {
    char* end;
    while (isspace((unsigned char)*s)) s++;
    if (*s == 0) return s;
    end = s + strlen(s) - 1;
    while (end > s && isspace((unsigned char)*end)) end--;
    *(end + 1) = 0;
    return s;
}

// 解析字节顺序
static ByteOrder parse_order(const char* s) {
    return (strcasecmp(s, "BIG_ENDIAN") == 0) ? BIG_ENDIAN : LITTLE_ENDIAN;
}

// 解析 Bayer 格式
static BayerPattern parse_pattern(const char* s) {
    if (strcasecmp(s, "RGGB") == 0) return RGGB;
    else if (strcasecmp(s, "GRBG") == 0) return GRBG;
    else if (strcasecmp(s, "GBRG") == 0) return GBRG;
    else                                   return BGGR;
}

// 计算简单表达式：支持 a 或 a*b
static double eval_simple_expr(const char* s) {
    char* star = (char*)malloc(strlen(s) + 1);
    strcpy(star, s);
    if (!star) {
        return strtod(s, NULL);
    }
    else {
        double a = strtod(s, NULL);
        double b = strtod(star + 1, NULL);
        return a * b;
    }
}

// 解析 U16 数组，返回元素个数
static int parse_u16_array(const char* s, U16** out) {
    // 定位到 '[' 并跳过
    while (*s && *s != '[') s++;
    if (*s == '[') s++;
    size_t cap = 4, cnt = 0;
    U16* arr = (U16*)malloc(cap * sizeof(U16));
    char* copy = strdup(s);
    char* rb = strchr(copy, ']');
    if (rb) *rb = '\0';

    char* tok = strtok(copy, ",");
    while (tok) {
        double v = eval_simple_expr(trim(tok));
        if (cnt >= cap) {
            cap *= 2;
            arr = (U16*)realloc(arr, cap * sizeof(U16));
        }
        arr[cnt++] = (U16)(v + 0.5);
        tok = strtok(NULL, ",");
    }

    free(copy);
    *out = arr;
    return (int)cnt;
}

// 解析 9 元素 float 数组
static void parse_float_array9(const char* s, float out[9]) {
    while (*s && *s != '[') s++;
    if (*s == '[') s++;
    char* copy = strdup(s);
    char* rb = strchr(copy, ']');
    if (rb) *rb = '\0';

    int idx = 0;
    char* tok = strtok(copy, ",");
    while (tok && idx < 9) {
        out[idx++] = (float)eval_simple_expr(trim(tok));
        tok = strtok(NULL, ",");
    }

    free(copy);
}
