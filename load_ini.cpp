#pragma once

#include "load_ini.h"

#define strcasecmp _stricmp 

void load_cfg(G_CONFIG* cfg)
{
    cfg->bit = 16;
    cfg->used_bit = 10;
    cfg->order = LITTLE_ENDIAN;
    cfg->pattern = BGGR;
    cfg->width = 1440;
    cfg->height = 1048;

    cfg->rgb_bit = 16;
    cfg->yuv_bit = 16;

    cfg->ob_on = 1;
    cfg->lsc_on = 1;
    cfg->isp_gain_on = 0;
    cfg->awb_on = 1;
    cfg->ltm_on = 1;
    cfg->ccm_on = 1;
    cfg->rgbgamma_on = 1;
    cfg->defog_on = 0;
    //cfg->ygamma_on = 0;
    cfg->sharp_on = 0;
    cfg->ynr_on = 1;
    cfg->cnr_on = 1;
    cfg->yuv_txi_on = 1;

    //12->16bit
    cfg->ob = 64 * 16;


    cfg->lsc_type = 0; //0为插值
    cfg->lsc_wblock = 17;
    cfg->lsc_hblock = 17;
#if 1
    U16 lsc_tmpr[] = {
    1972,1298,1115,1109,1123,1148,1181,1223,1271,1324,1387,1459,1550,1675,1897,2950,9817,
    1386,1055,1060,1083,1102,1127,1159,1196,1249,1304,1362,1419,1490,1594,1742,2103,5739,
    1111,1046,1055,1070,1090,1114,1147,1197,1253,1309,1357,1408,1467,1541,1656,1874,3277,
    1094,1059,1058,1068,1086,1109,1162,1218,1270,1321,1364,1409,1454,1508,1594,1761,2411,
    1109,1069,1064,1070,1086,1123,1180,1234,1282,1335,1371,1405,1445,1489,1553,1696,2070,
    1121,1086,1073,1077,1091,1138,1197,1251,1300,1343,1372,1407,1436,1468,1523,1643,1908,
    1145,1103,1088,1086,1104,1153,1208,1260,1304,1341,1370,1397,1417,1445,1494,1596,1826,
    1170,1123,1103,1095,1113,1162,1215,1262,1306,1332,1357,1383,1399,1422,1470,1559,1776,
    1197,1140,1116,1104,1121,1168,1216,1260,1294,1319,1342,1364,1376,1402,1440,1530,1729,
    1227,1160,1129,1114,1131,1171,1213,1248,1275,1301,1323,1339,1359,1373,1417,1508,1703,
    1267,1184,1141,1123,1130,1164,1201,1231,1258,1274,1294,1311,1328,1351,1392,1488,1681,
    1310,1214,1156,1130,1128,1157,1185,1210,1231,1244,1264,1280,1299,1325,1367,1474,1684,
    1363,1247,1178,1138,1125,1140,1162,1181,1193,1212,1227,1249,1270,1299,1355,1469,1689,
    1433,1283,1200,1146,1119,1119,1134,1144,1155,1167,1189,1207,1237,1274,1345,1473,1730,
    1565,1328,1227,1161,1122,1101,1101,1105,1111,1124,1143,1172,1211,1257,1346,1495,1850,
    1886,1394,1260,1181,1127,1096,1071,1065,1066,1079,1103,1140,1185,1247,1357,1544,2251,
    3077,1555,1323,1217,1146,1096,1059,1038,1024,1042,1072,1125,1181,1275,1408,1679,3823
    };
    U16 lsc_tmpgr[] = {
    2345,1477,1226,1206,1204,1214,1232,1258,1295,1338,1393,1469,1570,1710,1949,3092,13302,
    1616,1156,1159,1172,1171,1173,1183,1205,1239,1282,1338,1399,1484,1604,1775,2165,6517,
    1246,1146,1147,1147,1143,1141,1143,1173,1208,1249,1299,1355,1431,1530,1674,1921,3491,
    1217,1164,1153,1138,1124,1111,1131,1155,1184,1221,1270,1322,1389,1480,1599,1801,2524,
    1247,1181,1156,1133,1111,1105,1120,1142,1168,1203,1242,1293,1354,1437,1549,1728,2157,
    1264,1199,1163,1134,1099,1100,1115,1131,1155,1184,1219,1268,1329,1406,1508,1670,1991,
    1291,1220,1176,1137,1103,1101,1108,1123,1142,1169,1198,1244,1298,1373,1470,1623,1890,
    1319,1238,1191,1135,1104,1098,1104,1114,1133,1153,1181,1221,1274,1345,1438,1584,1838,
    1345,1258,1201,1141,1106,1099,1098,1106,1118,1136,1164,1201,1251,1321,1411,1545,1799,
    1378,1273,1210,1146,1111,1100,1096,1098,1107,1127,1152,1184,1236,1299,1386,1520,1763,
    1416,1298,1217,1154,1115,1098,1095,1094,1102,1116,1140,1171,1218,1281,1369,1506,1748,
    1456,1329,1232,1166,1122,1100,1091,1089,1096,1108,1132,1162,1206,1272,1357,1495,1745,
    1507,1356,1253,1179,1126,1100,1090,1084,1087,1101,1120,1154,1198,1259,1350,1499,1745,
    1571,1391,1276,1194,1131,1099,1085,1076,1078,1090,1111,1142,1189,1251,1345,1503,1776,
    1715,1434,1311,1216,1151,1103,1080,1069,1065,1077,1100,1137,1185,1252,1352,1523,1888,
    2094,1501,1342,1244,1169,1118,1075,1054,1044,1065,1088,1132,1188,1253,1371,1575,2297,
    3615,1676,1415,1290,1203,1138,1084,1048,1024,1048,1079,1142,1206,1300,1437,1716,4084
    };
    U16 lsc_tmpgb[] = {
    2351,1442,1223,1209,1206,1216,1236,1263,1295,1340,1401,1467,1570,1701,1933,3095,13031,
    1570,1144,1155,1170,1171,1176,1186,1208,1241,1282,1338,1399,1476,1589,1757,2149,6512,
    1217,1136,1144,1145,1142,1141,1144,1173,1206,1246,1294,1349,1419,1508,1649,1893,3459,
    1196,1155,1144,1131,1122,1111,1128,1153,1182,1216,1259,1311,1375,1456,1570,1760,2468,
    1227,1167,1147,1126,1106,1102,1116,1137,1163,1192,1230,1277,1336,1414,1514,1685,2096,
    1241,1185,1152,1125,1093,1098,1109,1126,1147,1174,1207,1250,1305,1377,1473,1625,1928,
    1266,1206,1165,1126,1095,1095,1104,1115,1133,1157,1185,1225,1277,1346,1437,1579,1838,
    1295,1223,1177,1128,1095,1093,1098,1107,1121,1141,1168,1204,1254,1318,1406,1537,1781,
    1321,1242,1190,1130,1098,1093,1094,1100,1111,1127,1151,1186,1232,1296,1379,1504,1740,
    1351,1255,1197,1137,1103,1094,1090,1093,1102,1116,1139,1170,1214,1275,1359,1480,1711,
    1382,1277,1204,1141,1108,1094,1088,1088,1094,1107,1127,1157,1200,1258,1341,1465,1692,
    1424,1303,1213,1153,1111,1094,1085,1083,1087,1098,1117,1147,1188,1246,1325,1455,1695,
    1470,1332,1234,1163,1115,1095,1083,1079,1080,1090,1109,1139,1177,1237,1318,1457,1696,
    1535,1364,1256,1179,1121,1093,1080,1071,1072,1081,1099,1129,1171,1232,1316,1460,1727,
    1671,1404,1287,1204,1137,1095,1074,1064,1060,1071,1092,1124,1170,1231,1325,1485,1845,
    2018,1471,1326,1229,1160,1109,1070,1051,1044,1059,1081,1123,1172,1237,1350,1541,2261,
    3408,1638,1390,1278,1194,1133,1082,1047,1024,1050,1078,1135,1197,1283,1416,1681,3998
    };
    U16 lsc_tmpb[] = {
    2118,1325,1138,1146,1167,1198,1231,1265,1303,1343,1400,1455,1537,1642,1830,2744,9593,
    1469,1058,1087,1127,1157,1187,1218,1253,1294,1334,1378,1426,1487,1562,1691,1985,5206,
    1126,1056,1086,1122,1155,1182,1218,1262,1308,1348,1388,1424,1468,1519,1615,1799,3002,
    1094,1076,1100,1125,1155,1182,1241,1289,1327,1368,1402,1433,1463,1502,1564,1702,2221,
    1112,1096,1109,1130,1159,1202,1257,1304,1348,1389,1414,1440,1459,1484,1527,1636,1936,
    1125,1110,1117,1140,1161,1214,1279,1326,1365,1399,1417,1448,1456,1475,1500,1591,1805,
    1142,1121,1129,1146,1171,1229,1285,1333,1373,1397,1418,1436,1440,1448,1470,1548,1730,
    1163,1133,1138,1147,1177,1232,1292,1335,1372,1395,1413,1426,1426,1431,1448,1514,1681,
    1180,1147,1145,1148,1176,1232,1287,1328,1361,1385,1400,1410,1410,1411,1424,1490,1647,
    1201,1156,1149,1147,1177,1228,1282,1318,1344,1367,1383,1390,1387,1388,1404,1463,1621,
    1230,1174,1153,1150,1175,1218,1267,1302,1326,1343,1361,1362,1362,1361,1377,1443,1603,
    1266,1194,1158,1146,1166,1206,1243,1274,1298,1311,1328,1331,1335,1339,1356,1430,1596,
    1305,1215,1169,1151,1155,1183,1214,1242,1259,1273,1287,1298,1304,1313,1342,1424,1600,
    1367,1240,1183,1148,1138,1151,1177,1192,1209,1219,1236,1249,1265,1283,1323,1423,1629,
    1482,1276,1202,1156,1131,1123,1132,1138,1153,1161,1181,1203,1230,1257,1318,1430,1724,
    1780,1331,1225,1166,1129,1107,1087,1082,1088,1104,1123,1158,1193,1239,1320,1467,2055,
    2899,1465,1270,1187,1135,1097,1062,1038,1024,1046,1076,1129,1180,1247,1349,1571,3384
    };

#endif

    cfg->isp_gain = 1024 * 0.96;

    cfg->r_gain = 1024 * 1.11;
    cfg->g_gain = 1024 * 1;
    cfg->b_gain = 1024 * 1.08;


    cfg->ltm_r = 20;
    cfg->ltm_str = 1.3;
    cfg->ltm_gain_limit_max = 2;
    cfg->ltm_gain_limit_min = 0.0;


    float ccm_tmp[9] = {
1.34, -0.00, -0.48,
-0.33, 1.68, -0.66,
-0.00, -0.67, 2.14
    };

    U32 gamma_xtmp[GAMMA_LENGTH] =
    {
        0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,256,320,384,448,512,640,768,896,1024,1280,1536,1792,2048,2304,2560,2816,3072,3328,3584,3840,4095
    };

    U32 gamma_ytmp[GAMMA_LENGTH] =
    {
        0,6,11,17,22,28,33,39,44,55,66,77,88,109,130,150,170,210,248,286,323,393,460,525,586,702,809,909,1002,1172,1323,1461,1587,1810,2003,2173,2325,2589,2812,3010,3191,3355,3499,3624,3736,3836,3927,4012,4095
    };

    cfg->ynr_r = 1;
    cfg->cnr_r = 3;

    cfg->txi_r_detail = 1;
    cfg->txi_r_bifilter = 1;
    cfg->txi_str = 20;

    //以下后处理
    U16 lsc_blk = cfg->lsc_wblock * cfg->lsc_hblock;
    cfg->lsc_rgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_bgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_grgain = (U16*)malloc(sizeof(U16) * lsc_blk);
    cfg->lsc_gbgain = (U16*)malloc(sizeof(U16) * lsc_blk);

    memcpy(cfg->lsc_rgain, lsc_tmpr, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_bgain, lsc_tmpb, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_grgain, lsc_tmpgr, sizeof(U16) * lsc_blk);
    memcpy(cfg->lsc_gbgain, lsc_tmpgb, sizeof(U16) * lsc_blk);


    memcpy(cfg->ccm, ccm_tmp, 9 * sizeof(float));
    if (cfg->rgb_bit > 12)
    {
        U8 shift = cfg->rgb_bit - 12;
        for (int i = 0; i < GAMMA_LENGTH; i++)
        {
            cfg->gamma_x[i] = gamma_xtmp[i] << shift;
            cfg->gamma_y[i] = gamma_ytmp[i] << shift;
        }
    }
    else if (cfg->rgb_bit < 12)
    {
        U8 shift = 12 - cfg->rgb_bit;
        for (int i = 0; i < GAMMA_LENGTH; i++)
        {
            cfg->gamma_x[i] = gamma_xtmp[i] >> shift;
            cfg->gamma_y[i] = gamma_ytmp[i] >> shift;
        }
    }

    return;
}

// 从 INI 文件加载配置
void load_cfg_from_ini(const char* filename, G_CONFIG* cfg) {
    FILE* f = fopen(filename, "r");
    if (!f) {
        perror("fopen");
        return;
    }
    // 初始化默认值
    memset(cfg, 0, sizeof(*cfg));
    cfg->order = LITTLE_ENDIAN;
    cfg->pattern = BGGR;
    cfg->lsc_rgain = NULL;

    char line[256], section[64] = { 0 };
    while (fgets(line, sizeof(line), f)) {
        char* p = trim(line);
        if (*p == 0 || *p == ';') continue;
        if (*p == '[') {
            char* end = strchr(p, ']');
            if (end) {
                size_t len = end - p - 1;
                strncpy(section, p + 1, len);
                section[len] = '\0';
            }
            continue;
        }
        char* eq = strchr(p, '=');
        if (!eq) continue;
        *eq = '\0';
        char* key = trim(p), * val = trim(eq + 1);

        if (strcmp(section, "raw_param") == 0) {
            if (strcmp(key, "bit") == 0) cfg->bit = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "used_bit") == 0) cfg->used_bit = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "order") == 0) cfg->order = parse_order(val);
            else if (strcmp(key, "pattern") == 0) cfg->pattern = parse_pattern(val);
        }
        else if (strcmp(section, "module_on") == 0) {
            if (strcmp(key, "ob_on") == 0) cfg->ob_on = (U8)strtoul(val, NULL, 0);
            else if (strcmp(key, "lsc_on") == 0) cfg->lsc_on = (U8)strtoul(val, NULL, 0);
        }
        else if (strcmp(section, "ob") == 0) {
            if (strcmp(key, "ob") == 0) cfg->ob = (U16)(eval_simple_expr(val) + 0.5);
        }
        else if (strcmp(section, "lsc") == 0) {
            if (strcmp(key, "lsc_rgain") == 0) parse_u16_array(val, &cfg->lsc_rgain);
        }
        else if (strcmp(section, "awb") == 0) {
            if (strcmp(key, "r_gain") == 0) cfg->r_gain = (U16)(eval_simple_expr(val) + 0.5);
        }
        else if (strcmp(section, "ccm") == 0) {
            if (strcmp(key, "ccm") == 0) parse_float_array9(val, cfg->ccm);
        }
    }
    fclose(f);
}

// 去除首尾空白
static char* trim(char* s) {
    char* end;
    while (isspace((unsigned char)*s)) s++;
    if (*s == 0) return s;
    end = s + strlen(s) - 1;
    while (end > s && isspace((unsigned char)*end)) end--;
    *(end + 1) = 0;
    return s;
}

// 解析字节顺序
static ByteOrder parse_order(const char* s) {
    return (strcasecmp(s, "BIG_ENDIAN") == 0) ? BIG_ENDIAN : LITTLE_ENDIAN;
}

// 解析 Bayer 格式
static BayerPattern parse_pattern(const char* s) {
    if (strcasecmp(s, "RGGB") == 0) return RGGB;
    else if (strcasecmp(s, "GRBG") == 0) return GRBG;
    else if (strcasecmp(s, "GBRG") == 0) return GBRG;
    else                                   return BGGR;
}

// 计算简单表达式：支持 a 或 a*b
static double eval_simple_expr(const char* s) {
    char* star = (char*)malloc(strlen(s) + 1);
    strcpy(star, s);
    if (!star) {
        return strtod(s, NULL);
    }
    else {
        double a = strtod(s, NULL);
        double b = strtod(star + 1, NULL);
        return a * b;
    }
}

// 解析 U16 数组，返回元素个数
static int parse_u16_array(const char* s, U16** out) {
    // 定位到 '[' 并跳过
    while (*s && *s != '[') s++;
    if (*s == '[') s++;
    size_t cap = 4, cnt = 0;
    U16* arr = (U16*)malloc(cap * sizeof(U16));
    char* copy = strdup(s);
    char* rb = strchr(copy, ']');
    if (rb) *rb = '\0';

    char* tok = strtok(copy, ",");
    while (tok) {
        double v = eval_simple_expr(trim(tok));
        if (cnt >= cap) {
            cap *= 2;
            arr = (U16*)realloc(arr, cap * sizeof(U16));
        }
        arr[cnt++] = (U16)(v + 0.5);
        tok = strtok(NULL, ",");
    }

    free(copy);
    *out = arr;
    return (int)cnt;
}

// 解析 9 元素 float 数组
static void parse_float_array9(const char* s, float out[9]) {
    while (*s && *s != '[') s++;
    if (*s == '[') s++;
    char* copy = strdup(s);
    char* rb = strchr(copy, ']');
    if (rb) *rb = '\0';

    int idx = 0;
    char* tok = strtok(copy, ",");
    while (tok && idx < 9) {
        out[idx++] = (float)eval_simple_expr(trim(tok));
        tok = strtok(NULL, ",");
    }

    free(copy);
}
